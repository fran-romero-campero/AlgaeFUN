runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/ChlamyNET')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
gene.expression[zts.to.consider(zt.point = current.time.point) %in% seq(from=,to=24,by=4)]
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
library(igraph)
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
1+1
genotype.1 <- "resistant"
genotype.1
fecundity.1 <- 12.8
fecundity.1
FALSE
genotype.2 <- "resistant"
fecundity.2 <- 21.6
genotype.3 <- "control"
fecundity.3 <- 35.4
genotype.4 <- "control"
fecundity.4 <- 27.4
genotype.1
## Los tipos de datos simples en R son numérico, carácter y lógico.
is.numeric(genotype.1)
genotype.1
is.character(genotype.1)
res <- is.character(fecundity.1)   # El resultado de una función puede almacenarse en una variable
res
res
is.logical(res)
fecundity.1
fecundity.2
resistant.mean <- (fecundity.1 + fecundity.2) / 2
resistant.mean
fecundity.1
fecundity.3
fecundity.1 > fecundity.3
fecundity.2
fecundity.4
fecundity.2 <= fecundity.4
genotype.4
genotype.4 == "control"
fecundity.resistant <- c(12.8, 21.6, 14.8, 23.1, 34.6, 19.7, 22.6, 29.6, 16.4, 20.3, 29.3,
14.9, 27.3, 22.4, 27.5, 20.3, 38.7, 26.4, 23.7, 26.1, 29.5, 38.6,
44.4, 23.2, 23.6)
fecundity.resistant
1:25
25:1
1:25+1
1:2500+1
1:(25+1)
myvar <- 1:(25+1)
myvar
seq(from = 0,to = 20,by = 2)
seq(to = 20,by = 2,from = 0)
rep("resistant",25)
fecundity.susceptible <- c(38.4, 32.9, 48.5, 20.9, 11.6, 22.3, 30.2, 33.4, 26.7, 39, 12.8, 14.6, 12.2, 23.1,
29.4, 16, 20.1, 23.3, 22.9, 22.5, 15.1, 31, 16.9, 16.1, 10.8)
fecundity.control <- c(35.4, 27.4, 19.3, 41.8, 20.3, 37.6, 36.9)
fecundity.control
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
fecundity.control.names
names(fecundity.control) <- fecundity.control.names
fecundity.control
fecundity.control
fecundity.control[2]
fecundity.control[Mar]
fecundity.control["Mar"]
fecundity.control[["Mar"]]
fecundity.control[1:3]
fecundity.control[c(1,2,3)]
fecundity.control[c("Lun","Mar","Mie")]
fecundity.control[c("Lun","Mie","Mar")]
fecundity.control["Sab"]
fecundity.control["sab"]
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
names(fecundity.control) <- fecundity.control.names
fecundity.control
my.logical <-
fecundity.control > 30
fecundity.control > 30
my.logical <- fecundity.control > 30
fecundity.control[my.logical]
fecundity.control[fecundity.control < 20]
fecundity.control["Lun"]
fecundity.control["Lun"] <- 34.5
fecundity.control["Lun"]
fecundity.control
fecundity.control < 20
fecundity.control[fecundity.control < 20]
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
setwd("~/Dropbox/github_repos/AlgaeFun/web_app")
library(clusterProfiler)
library(pathview)
## Load microalgae annotation packages
library(org.Otauri.eg.db)
library(org.Creinhardtii.eg.db)
library(org.Dsalina.eg.db)
library(org.Vcarteri.eg.db)
library(org.Ptricornutum.eg.db)
microalgae.names <- c("Ostreococcus tauri", "Chlamydomonas reinhardtii", "Dunaliella salina","Volvox carteri","Phaeodactylum tricornutum")
names(microalgae.names) <- c("otauri", "creinhardtii", "dsalina", "vcarteri","ptricornutum")
input <- list(microalgae = "ptricornutum", pvalue = 0.05, analysis = "kegg", input_mode = "No")
target.genes <- read.table(file="example_files/example_ptricornutum.txt, as.is=T")[[1]]
setwd("~/Dropbox/github_repos/AlgaeFun/web_app")
target.genes <- read.table(file="example_files/example_ptricornutum.txt, as.is=T")[[1]]
target.genes <- read.table(file="example_files/example_ptricornutum.txt", as.is=T)[[1]]
target.genes
org.db <- org.Ptricornutum.eg.db
microalgae.genes <- read.table(file = "universe/phatri_universe.txt",as.is = T)[[1]]
input$microalgae == "ptricornutum"
kegg.enriched.genes <- pathway.enrichment.result$geneID
phatri.draft.map <- select(org.Vcarteri.eg.db,columns = c("PHATRIDRAFT"),keys=keys(org.Vcarteri.eg.db,keytype = "GID"))
phatri.draft.map <- select(org.Ptricornutum.eg.db,columns = c("PHATRIDRAFT"),keys=keys(org.Vcarteri.eg.db,keytype = "GID"))
columns(org.Ptricornutum.eg.db)
phatri.draft.map <- select(org.Ptricornutum.eg.db,columns = c("PHATRIDRAFT"),keys=keys(org.Ptricornutum.eg.db,keytype = "GID"))
phatri.ids <- phatri.draft.map$GID
phatri.ids
phatridraft.ids <- phatri.draft.map$PHATHIDRAFT
names(phatridraft.ids) <- phatri.ids
names(phatri.ids) <- phatridraft.ids
phatridraft.ids
phatridraft.ids <- phatri.draft.map$PHATRIDRAFT
names(phatridraft.ids) <- phatri.ids
names(phatri.ids) <- phatridraft.ids
phatridraft.ids
target.genes <- phatridraft.ids[target.genes]
names(target.genes) <- NULL
target.genes
gene.universe <- phatridraft.ids[gene.universe]
names(gene.universe) <- NULL
input$input_mode == "No"
gene.universe <- unique(select(org.db,columns = c("GO"),keys=keys(org.db,keytype = "GID"))[["GID"]])
universe.text <- " default universe."
gene.universe <- phatridraft.ids[gene.universe]
names(gene.universe) <- NULL
gene.universe
organism.id <- "pti"
## Compute KEGG pathway enrichment
pathway.enrichment <- enrichKEGG(gene = target.genes, organism = organism.id, keyType = "kegg",
universe = gene.universe,qvalueCutoff = input$pvalue)
pathway.enrichment.result <- as.data.frame(pathway.enrichment)
pathway.enrichment.result
nrow(pathway.enrichment.result) > 0
kegg.intro.text <- paste(c("This tab presents the results from the <b>KEGG pathways/modules enrichment analysis</b>
performed over the input target genes (<i>",
paste(gsub(pattern="OT_",replacement="",x=target.genes[1:3]),collapse=" "),
"</i> ...) from the microalgae <b> <i>", microalgae.names[input$microalgae],
" </i> </b> with ", universe.text),collapse="")
pathways.enrichment <- compute.enrichments(gene.ratios = pathway.enrichment.result$GeneRatio,
bg.ratios = pathway.enrichment.result$BgRatio)
## Auxiliary functions
## Auxiliary function to compute enrichments
compute.enrichments <- function(gene.ratios, bg.ratios)
{
gene.ratios.eval <- sapply(parse(text=gene.ratios),FUN = eval)
bg.ratios.eval <- sapply(parse(text=bg.ratios),FUN = eval)
enrichments <- round(x=gene.ratios.eval/bg.ratios.eval,digits = 2)
enrichments.text <- paste(enrichments, " (", gene.ratios, "; ", bg.ratios, ")",sep="")
return(enrichments.text)
}
pathways.enrichment <- compute.enrichments(gene.ratios = pathway.enrichment.result$GeneRatio,
bg.ratios = pathway.enrichment.result$BgRatio)
input$microalgae == "otauri"
input$microalgae == "ptricornutum"
kegg.enriched.genes <- pathway.enrichment.result$geneID
for(i in 1:length(kegg.enriched.genes))
{
kegg.enriched.genes[i] <- paste(phatri.ids[strsplit(kegg.enriched.genes[i],split="/")[[1]]],collapse=" ")
}
pathways.result.table <- data.frame(pathway.enrichment.result$ID, pathway.enrichment.result$Description,
pathway.enrichment.result$pvalue, pathway.enrichment.result$qvalue,
pathways.enrichment,
kegg.enriched.genes,
stringsAsFactors = FALSE)
colnames(pathways.result.table) <- c("KEGG ID", "Description", "p-value", "q-value",
"Enrichment (Target Ratio; BG Ration)","Genes")
kegg.result.table.with.links <- pathways.result.table
gene.link.function <- phaeodactylum.gene.link
## Phaeodactylum tricornutum link to ENSEMBL PROTISTS
## https://protists.ensembl.org/Phaeodactylum_tricornutum/Gene/Summary?g=Phatr3_EG00535
phaeodactylum.gene.link <- function(gene.name)
{
phatri.link <- paste(c("https://protists.ensembl.org/Phaeodactylum_tricornutum/Gene/Summary?g=",
gene.name),collapse="")
gene.link <- paste(c("<a href=\"",
phatri.link,
"\" target=\"_blank\">",
gene.name, "</a>"),
collapse="")
return(gene.link)
}
for(i in 1:length(kegg.enriched.genes))
{
kegg.result.table.with.links$Genes[i] <- paste(sapply(X = strsplit(kegg.enriched.genes[i],split=" ")[[1]],FUN = gene.link.function),collapse=" ")
}
gene.link.function <- phaeodactylum.gene.link
for(i in 1:length(kegg.enriched.genes))
{
kegg.result.table.with.links$Genes[i] <- paste(sapply(X = strsplit(kegg.enriched.genes[i],split=" ")[[1]],FUN = gene.link.function),collapse=" ")
}
## Add links to kegg pathways
kegg.result.table.with.links[["KEGG ID"]] <- sapply(X=kegg.result.table.with.links[["KEGG ID"]],FUN = kegg.pathway.link)
kegg.pathway.link <- function(kegg.pathway)
{
link <- paste0("https://www.genome.jp/kegg-bin/show_pathway?",kegg.pathway)
complete.link <- paste(c("<a href=\"",
link,
"\" target=\"_blank\">",
kegg.pathway, "</a>"),
collapse = "")
return(complete.link)
}
## KEGG module link
## https://www.genome.jp/kegg-bin/show_module?cre04136
kegg.module.link <- function(kegg.module)
{
link <- paste0("https://www.genome.jp/kegg-bin/show_module?",kegg.module)
complete.link <- paste(c("<a href=\"",
link,
"\" target=\"_blank\">",
kegg.module, "</a>"),
collapse = "")
return(complete.link)
}
gene.link.function <- phaeodactylum.gene.link
for(i in 1:length(modules.enriched.genes))
{
modules.result.table.with.links$Genes[i] <- paste(sapply(X = strsplit(modules.enriched.genes[i],split=" ")[[1]],FUN = gene.link.function),collapse=" ")
}
modules.result.table <- data.frame(modules.enrichment.result$ID, modules.enrichment.result$Description,
modules.enrichment.result$pvalue, modules.enrichment.result$qvalue,
modules.enrichment,
modules.enriched.genes,
stringsAsFactors = FALSE)
runApp()
library(seqinr)
setwd("~/Dropbox/github_repos/AlgaeFun/data/naga/jgi_vs_ensembl")
read.fasta(file="Nannochloropsis_gaditana_ensembl.fa",seqtype = "AA")
naga.ensembl <- read.fasta(file="Nannochloropsis_gaditana_ensembl.fa",seqtype = "AA")
naga.ensembl.names.raw <- getAnnot(naga.ensembl)
source('~/Dropbox/github_repos/AlgaeFun/data/naga/jgi_vs_ensembl/sequences_naming.R', echo=TRUE)
naga.annot <- naga.ensembl.names.raw[[1]]
strsplit(x = naga.annot,split="gene:")
strsplit(x = naga.annot,split="gene:")[[1]]
strsplit(x = naga.annot,split="gene:")[[1]][2]
strsplit(strsplit(x = naga.annot,split="gene:")[[1]][2],split=" ")
strsplit(strsplit(x = naga.annot,split="gene:")[[1]][2],split=" ")[[1]][1]
extract.ensembl.name <- function(naga.annot)
{
return(strsplit(strsplit(x = naga.annot,split="gene:")[[1]][2],split=" ")[[1]][1])
}
sapply(naga.ensembl.names.raw,FUN = extract.ensembl.name())
sapply(naga.ensembl.names.raw,FUN = extract.ensembl.name)
naga.ensembl.names <- sapply(naga.ensembl.names.raw,FUN = extract.ensembl.name)
write.fasta(sequences = getSequence(naga.ensembl),names = naga.ensembl.names,file.out = "naga_ensembl.fa")
naga.jgi <- read.fasta(file = "Nannochloropsis_gaditana_jgi.fasta", seqtype = "AA")
naga.jgi.names.raw <- getAnnot(naga.jgi)
source('~/Dropbox/github_repos/AlgaeFun/data/naga/jgi_vs_ensembl/sequences_naming.R', echo=TRUE)
naga.annot <- naga.jgi.names.raw[[1]]
naga.annot
strsplit(naga.annot, split="|")
strsplit(naga.annot, split="\\|")
strsplit(naga.annot, split="\\|")[[1]]
strsplit(naga.annot, split="\\|")[[1]][3]
sapply(naga.jgi.names.raw, extract.jgi.name)
extract.jgi.name <- function(naga.annot)
{
return(strsplit(naga.annot, split="\\|")[[1]][3])
}
sapply(naga.jgi.names.raw, extract.jgi.name)
naga.jgi.names <- sapply(naga.jgi.names.raw, extract.jgi.name)
write.fasta(sequences = getSequence(naga.jgi),names = naga.jgi.names,file.out = "naga_jgi.fa")
setwd("~/Dropbox/github_repos/AlgaeFun/data/naga/jgi_vs_ensembl")
## Loading require packages seqinr and Biostrings
library(seqinr)
library(Biostrings)
## Loading substitution matrix PAM250
data(BLOSUM62)
## Loading details for source protein sequence
source.data <- read.fasta(file="naga_ensembl.fa", seqtype="AA")
source.names <- getName(source.data)
source.seqs <- getSequence(source.data)
n.source <- length(source.seqs)
n.source
## Loading details for target protein sequences
target.data <- read.fasta(file="naga_jgi.fa", seqtype="AA")
target.names <- getName(target.data)
target.seqs <- getSequence(target.data)
n.target <- length(target.names)
n.target
