increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 + hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/ChlamyNET')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
gene.expression[zts.to.consider(zt.point = current.time.point) %in% seq(from=,to=24,by=4)]
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
library(igraph)
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
input <- list(microalgae = "otauri", pvalue = 0.05, analysis = "kegg", input_mode = "No")
target.genes <- read.table(file="ostta/examples/no_iron_vs_iron_15H/activated/activated_genes.txt",as.is=T)[[1]]
setwd("~/Dropbox/github_repos/AlgaeFun/data")
target.genes <- read.table(file="ostta/examples/no_iron_vs_iron_15H/activated/activated_genes.txt",as.is=T)[[1]]
library(clusterProfiler)
library(pathview)
## Load microalgae annotation packages
library(org.Otauri.eg.db)
library(org.Creinhardtii.eg.db)
library(org.Dsalina.eg.db)
microalgae.names <- c("Ostreococcus tauri", "Chlamydomonas reinhardtii")
names(microalgae.names) <- c("otauri", "creinhardtii")
## Auxiliary functions
## Auxiliary function to compute enrichments
compute.enrichments <- function(gene.ratios, bg.ratios)
{
gene.ratios.eval <- sapply(parse(text=gene.ratios),FUN = eval)
bg.ratios.eval <- sapply(parse(text=bg.ratios),FUN = eval)
enrichments <- round(x=gene.ratios.eval/bg.ratios.eval,digits = 2)
enrichments.text <- paste(enrichments, " (", gene.ratios, "; ", bg.ratios, ")",sep="")
return(enrichments.text)
}
## Ostreococcus tauri gene link to ORCAE
## https://bioinformatics.psb.ugent.be/orcae/annotation/OsttaV2/current/ostta15g02520
ostta.gene.link <- function(gene.name)
{
orcae.link <- paste0("https://bioinformatics.psb.ugent.be/orcae/annotation/OsttaV2/current/",gene.name)
gene.link <- paste(c("<a href=\"",
orcae.link,
"\" target=\"_blank\">",
gene.name, "</a>"),
collapse="")
return(gene.link)
}
## Gene link to Phytozome
## https://phytozome.jgi.doe.gov/pz/portal.html#!results?search=0&crown=1&star=1&method=0&searchText=Cre13.g569850&offset=0
phytozome.gene.link <- function(gene.name)
{
phytozome.link <- paste(c("https://phytozome.jgi.doe.gov/pz/portal.html#!results?search=0&crown=1&star=1&method=0&searchText=",
gene.name,
"&offset=0"),collapse="")
gene.link <- paste(c("<a href=\"",
phytozome.link,
"\" target=\"_blank\">",
gene.name, "</a>"),
collapse="")
return(gene.link)
}
## Gene Ontology term link
# http://amigo.geneontology.org/amigo/term/GO:0015979
go.link <- function(go.term)
{
link <- paste0("http://amigo.geneontology.org/amigo/term/", go.term)
complete.link <- paste(c("<a href=\"",
link,
"\" target=\"_blank\">",
go.term, "</a>"),
collapse = "")
return(complete.link)
}
## KEGG pathway link
## https://www.genome.jp/kegg-bin/show_pathway?cre04136
kegg.pathway.link <- function(kegg.pathway)
{
link <- paste0("https://www.genome.jp/kegg-bin/show_pathway?",kegg.pathway)
complete.link <- paste(c("<a href=\"",
link,
"\" target=\"_blank\">",
kegg.pathway, "</a>"),
collapse = "")
return(complete.link)
}
## KEGG module link
## https://www.genome.jp/kegg-bin/show_module?cre04136
kegg.module.link <- function(kegg.module)
{
link <- paste0("https://www.genome.jp/kegg-bin/show_module?",kegg.module)
complete.link <- paste(c("<a href=\"",
link,
"\" target=\"_blank\">",
kegg.module, "</a>"),
collapse = "")
return(complete.link)
}
input$microalgae == "otauri"
org.db <- org.Otauri.eg.db
input$input_mode == "No"
gene.universe <- unique(select(org.db,columns = c("GO"),keys=keys(org.db,keytype = "GID"))[["GID"]])
universe.text <- " default universe."
input$analysis == "go" || input$analysis == "both"
input$analysis == "kegg"  || input$analysis == "both"
input$microalgae == "otauri"
target.genes <- paste0("OT_",target.genes)
gene.universe <- paste0("OT_",gene.universe)
organism.id <- "ota"
## Compute KEGG pathway enrichment
pathway.enrichment <- enrichKEGG(gene = target.genes, organism = organism.id, keyType = "kegg",
universe = gene.universe,qvalueCutoff = input$pvalue)
pathway.enrichment.result <- as.data.frame(pathway.enrichment)
pathway.enrichment.result
## Compute KEGG pathway enrichment
pathway.enrichment <- enrichKEGG(gene = target.genes, organism = organism.id, keyType = "kegg",
universe = gene.universe,qvalueCutoff = input$pvalue)
pathway.enrichment.result <- as.data.frame(pathway.enrichment)
pathway.enrichment.result
## Figures for KEGG pathway enrichment analysis
pathway.enrichment.result$ID
## Prepare gene set for representation
genes.pathway <- rep(0, length(gene.universe))
names(genes.pathway) <- gene.universe
genes.pathway[target.genes] <- 1
genes.pathway
pathway.enrichment.result$ID[i]
## Prepare gene set for representation
i <- 1
genes.pathway <- rep(0, length(gene.universe))
names(genes.pathway) <- gene.universe
genes.pathway[target.genes] <- 1
pathway.enrichment.result$ID[i]
pathview(gene.data = sort(genes.pathway,decreasing = TRUE),
pathway.id = pathway.enrichment.result$ID[i],
species = "ota",
limit = list(gene=max(abs(genes.pathway)), cpd=1),
gene.idtype ="kegg")
pathview(gene.data = sort(genes.pathway,decreasing = TRUE),
pathway.id = pathway.enrichment.result$ID[i],
species = "ota",
limit = list(gene=max(abs(genes.pathway)), cpd=1),
gene.idtype ="kegg")
pathview(gene.data = sort(genes.pathway,decreasing = TRUE),
pathway.id = pathway.enrichment.result$ID[i],
species = "ota",
limit = list(gene=max(abs(genes.pathway)), cpd=1),
gene.idtype ="kegg")
help("pathview")
pathview(gene.data = sort(genes.pathway,decreasing = TRUE),
pathway.id = pathway.enrichment.result$ID[i],
species = "ota",
limit = list(gene=max(abs(genes.pathway)), cpd=1),
gene.idtype ="kegg",kegg.native=FALSE)
pathview(gene.data = sort(genes.pathway,decreasing = TRUE),
pathway.id = pathway.enrichment.result$ID[2],
species = "ota",
limit = list(gene=max(abs(genes.pathway)), cpd=1),
gene.idtype ="kegg",kegg.native=FALSE)
pathview(gene.data = sort(genes.pathway,decreasing = TRUE),
pathway.id = pathway.enrichment.result$ID[2],
species = "ota",
limit = list(gene=max(abs(genes.pathway)), cpd=1),
gene.idtype ="kegg")
