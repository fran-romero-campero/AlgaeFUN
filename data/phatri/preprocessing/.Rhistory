hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/ChlamyNET')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
gene.expression[zts.to.consider(zt.point = current.time.point) %in% seq(from=,to=24,by=4)]
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
library(igraph)
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
1+1
genotype.1 <- "resistant"
genotype.1
fecundity.1 <- 12.8
fecundity.1
FALSE
genotype.2 <- "resistant"
fecundity.2 <- 21.6
genotype.3 <- "control"
fecundity.3 <- 35.4
genotype.4 <- "control"
fecundity.4 <- 27.4
genotype.1
## Los tipos de datos simples en R son numérico, carácter y lógico.
is.numeric(genotype.1)
genotype.1
is.character(genotype.1)
res <- is.character(fecundity.1)   # El resultado de una función puede almacenarse en una variable
res
res
is.logical(res)
fecundity.1
fecundity.2
resistant.mean <- (fecundity.1 + fecundity.2) / 2
resistant.mean
fecundity.1
fecundity.3
fecundity.1 > fecundity.3
fecundity.2
fecundity.4
fecundity.2 <= fecundity.4
genotype.4
genotype.4 == "control"
fecundity.resistant <- c(12.8, 21.6, 14.8, 23.1, 34.6, 19.7, 22.6, 29.6, 16.4, 20.3, 29.3,
14.9, 27.3, 22.4, 27.5, 20.3, 38.7, 26.4, 23.7, 26.1, 29.5, 38.6,
44.4, 23.2, 23.6)
fecundity.resistant
1:25
25:1
1:25+1
1:2500+1
1:(25+1)
myvar <- 1:(25+1)
myvar
seq(from = 0,to = 20,by = 2)
seq(to = 20,by = 2,from = 0)
rep("resistant",25)
fecundity.susceptible <- c(38.4, 32.9, 48.5, 20.9, 11.6, 22.3, 30.2, 33.4, 26.7, 39, 12.8, 14.6, 12.2, 23.1,
29.4, 16, 20.1, 23.3, 22.9, 22.5, 15.1, 31, 16.9, 16.1, 10.8)
fecundity.control <- c(35.4, 27.4, 19.3, 41.8, 20.3, 37.6, 36.9)
fecundity.control
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
fecundity.control.names
names(fecundity.control) <- fecundity.control.names
fecundity.control
fecundity.control
fecundity.control[2]
fecundity.control[Mar]
fecundity.control["Mar"]
fecundity.control[["Mar"]]
fecundity.control[1:3]
fecundity.control[c(1,2,3)]
fecundity.control[c("Lun","Mar","Mie")]
fecundity.control[c("Lun","Mie","Mar")]
fecundity.control["Sab"]
fecundity.control["sab"]
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
names(fecundity.control) <- fecundity.control.names
fecundity.control
my.logical <-
fecundity.control > 30
fecundity.control > 30
my.logical <- fecundity.control > 30
fecundity.control[my.logical]
fecundity.control[fecundity.control < 20]
fecundity.control["Lun"]
fecundity.control["Lun"] <- 34.5
fecundity.control["Lun"]
fecundity.control
fecundity.control < 20
fecundity.control[fecundity.control < 20]
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
setwd("~/Dropbox/github_repos/AlgaeFun/data/phatri/preprocessing")
phatri.info <- read.table(file="phatri_info.txt",header=T,sep="\t",as.is=T)
nrow(phatri.info)
## Generate SYMBOL data frame
symbol.data.frame <- data.frame(GID=gene.names,SYMBOL=gene.names,stringsAsFactors = FALSE)
gene.names <- unique(phatri.info$Gene.stable.ID)
## Generate SYMBOL data frame
symbol.data.frame <- data.frame(GID=gene.names,SYMBOL=gene.names,stringsAsFactors = FALSE)
nrow(symbol.data.frame)
## Remove duplicated rows
symbol.data.frame <- symbol.data.frame[!duplicated(symbol.data.frame),]
nrow(symbol.data.frame)
gid <- vector(mode="character",length=nrow(phatri.info))
go <- vector(mode="character",length=nrow(phatri.info))
evidence <- rep("ISS",nrow(phatri.info))
for(i in 1:nrow(phatri.info))
{
gid[i] <- phatri.info$Gene.stable.ID[i]   #gene.names[as.character(go.info$X.proteinId[i])]
go[i] <- phatri.info$GO.term.accession[i]
}
go.data.frame <- data.frame(GID=gid,GO=go,EVIDENCE=evidence,stringsAsFactors = FALSE)
go.data.frame <- go.data.frame[!duplicated(go.data.frame),]
go.data.frame <- go.data.frame[go.data.frame$GO != "",]
head(go.data.frame)
gid <- vector(mode="character",length=nrow(phatri.info))
enzyme <- vector(mode="character",length=nrow(phatri.info))
for(i in 1:nrow(phatri.info))
{
gid[i] <- phatri.info$Gene.stable.ID[i]
enzyme[i] <- strsplit(phatri.info$KEGG.Pathway.and.Enzyme.ID[i], split="\\+")[[1]][2]
}
enzyme.data.frame <- data.frame(GID=gid,ENZYME=enzyme,stringsAsFactors = FALSE)
head(enzyme.data.frame)
## Remove duplicated rows
enzyme.data.frame <- enzyme.data.frame[!duplicated(enzyme.data.frame),]
enzyme.data.frame <- enzyme.data.frame[!is.na(enzyme.data.frame$ENZYME),]
head(enzyme.data.frame)
enzyme.data.frame$ENZYME
##Generate panther data frame
panther <- phatri.info$Gene.stable.ID
panther.data.frame <- data.frame(GID=phatri.info$Gene.stable.ID, PANTHER=phatri.info$PANTHER.ID, stringsAsFactors = F)
nrow(panther.data.frame)
head(panther.data.frame)
panther.data.frame <- panther.data.frame[!duplicated(panther.data.frame),]
nrow(panther.data.frame)
panther.data.frame <- panther.data.frame[panther.data.frame$PANTHER != "",]
head(panther.data.frame)
##Generate pfam data frame
pfam.data.frame <- data.frame(GID=phatri.info$Gene.stable.ID, PFAM=phatri.info$Pfam.ID, stringsAsFactors = F)
nrow(pfam.data.frame)
head(pfam.data.frame)
pfam.data.frame <- pfam.data.frame[!duplicated(pfam.data.frame),]
nrow(pfam.data.frame)
pfam.data.frame <- pfam.data.frame[pfam.data.frame$PFAM != "",]
head(pfam.data.frame)
## Phatri draft for kegg analysis
phatri.draft <- read.table(file="../phatri_vs_phatridraft/result_identity.txt",header=F,as.is=T)
head(phatri.draft)
phatri.draft$V1
phatri.draft$V2
phatridraft.data.frame <- data.frame(GID=phatri.draft$V1,PHATRIDRAFT=phatri.draft$V2,stringsAsFactors = FALSE)
head(phatridraft.data.frame)
phatridraft.data.frame <- phatridraft.data.frame[!duplicated(phatridraft.data.frame),]
nrow(phatridraft.data.frame)
## Load require package
library(AnnotationForge)
makeOrgPackage(go=go.data.frame,
SYMBOL=symbol.data.frame,
ENZYME=enzyme.data.frame,
PANTHER=panther.data.frame,
PFAM=pfam.data.frame,
PHATRIDRAFT=phatridraft.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero <fran@us.es>",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "556484",
genus = "Phaeodactylum",
species = "tricornutum",
goTable = "go",
verbose = TRUE)
install.packages("./org.Ptricornutum.eg.db", repos=NULL)
library(org.Ptricornutum.eg.db)
columns(org.Ptricornutum.eg.db)
