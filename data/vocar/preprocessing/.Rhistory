var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/ChlamyNET')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
gene.expression[zts.to.consider(zt.point = current.time.point) %in% seq(from=,to=24,by=4)]
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
library(igraph)
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
1+1
genotype.1 <- "resistant"
genotype.1
fecundity.1 <- 12.8
fecundity.1
FALSE
genotype.2 <- "resistant"
fecundity.2 <- 21.6
genotype.3 <- "control"
fecundity.3 <- 35.4
genotype.4 <- "control"
fecundity.4 <- 27.4
genotype.1
## Los tipos de datos simples en R son numérico, carácter y lógico.
is.numeric(genotype.1)
genotype.1
is.character(genotype.1)
res <- is.character(fecundity.1)   # El resultado de una función puede almacenarse en una variable
res
res
is.logical(res)
fecundity.1
fecundity.2
resistant.mean <- (fecundity.1 + fecundity.2) / 2
resistant.mean
fecundity.1
fecundity.3
fecundity.1 > fecundity.3
fecundity.2
fecundity.4
fecundity.2 <= fecundity.4
genotype.4
genotype.4 == "control"
fecundity.resistant <- c(12.8, 21.6, 14.8, 23.1, 34.6, 19.7, 22.6, 29.6, 16.4, 20.3, 29.3,
14.9, 27.3, 22.4, 27.5, 20.3, 38.7, 26.4, 23.7, 26.1, 29.5, 38.6,
44.4, 23.2, 23.6)
fecundity.resistant
1:25
25:1
1:25+1
1:2500+1
1:(25+1)
myvar <- 1:(25+1)
myvar
seq(from = 0,to = 20,by = 2)
seq(to = 20,by = 2,from = 0)
rep("resistant",25)
fecundity.susceptible <- c(38.4, 32.9, 48.5, 20.9, 11.6, 22.3, 30.2, 33.4, 26.7, 39, 12.8, 14.6, 12.2, 23.1,
29.4, 16, 20.1, 23.3, 22.9, 22.5, 15.1, 31, 16.9, 16.1, 10.8)
fecundity.control <- c(35.4, 27.4, 19.3, 41.8, 20.3, 37.6, 36.9)
fecundity.control
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
fecundity.control.names
names(fecundity.control) <- fecundity.control.names
fecundity.control
fecundity.control
fecundity.control[2]
fecundity.control[Mar]
fecundity.control["Mar"]
fecundity.control[["Mar"]]
fecundity.control[1:3]
fecundity.control[c(1,2,3)]
fecundity.control[c("Lun","Mar","Mie")]
fecundity.control[c("Lun","Mie","Mar")]
fecundity.control["Sab"]
fecundity.control["sab"]
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
names(fecundity.control) <- fecundity.control.names
fecundity.control
my.logical <-
fecundity.control > 30
fecundity.control > 30
my.logical <- fecundity.control > 30
fecundity.control[my.logical]
fecundity.control[fecundity.control < 20]
fecundity.control["Lun"]
fecundity.control["Lun"] <- 34.5
fecundity.control["Lun"]
fecundity.control
fecundity.control < 20
fecundity.control[fecundity.control < 20]
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
setwd("~/Dropbox/github_repos/AlgaeFun/data/vocar/preprocessing")
group <- 1
## Loading require packages seqinr and Biostrings
library(seqinr)
library(Biostrings)
## Loading substitution matrix PAM250
data(BLOSUM62)
## Loading details for source protein sequence
source.data <- read.fasta(file="vcarteri_protein.fa", seqtype="AA")
source.names <- getName(source.data)
source.seqs <- getSequence(source.data)
n.source <- length(source.seqs)
## Loading details for target protein sequences
target.data <- read.fasta(file="volcadraft_seqs.fasta", seqtype="AA")
target.names <- getName(target.data)
target.seqs <- getSequence(target.data)
n.target <- length(target.names)
pot.orthologs.identities <- vector(mode = "numeric",length = n.source)
pot.orthologs.names <- vector(mode = "character",length = n.source)
lower.bound <- (group - 1)*1000 + 1
upper.bound <- group * 1000
k <- 1
for (i in lower.bound:upper.bound)
{
print(i)
source.protein.name <- source.names[[i]]
source.protein.seq <- c2s(source.seqs[[i]])
pot.orthologs.identity <- 0
pot.orthologs.name <- NA
for(j in 1:n.target)
{
target.protein.name <- target.names[[j]]
target.protein.seq <- c2s(target.seqs[[j]])
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
source.protein.align <- s2c(as.character(pattern(res.align)))
target.protein.align <- s2c(as.character(subject(res.align)))
identity <- sum(target.protein.align == source.protein.align)/length(source.protein.align)
if(identity > pot.orthologs.identity)
{
pot.orthologs.identity <- identity
pot.orthologs.name <- target.protein.name
}
}
pot.orthologs.identities[k] <- pot.orthologs.identity
pot.orthologs.names[k] <- pot.orthologs.name
print(pot.orthologs.identity)
print("----------")
k <- k + 1
}
BLOSUM62["X",]
for (i in 1:10)#lower.bound:upper.bound)
{
print(i)
source.protein.name <- source.names[[i]]
source.protein.seq <- c2s(source.seqs[[i]])
pot.orthologs.identity <- 0
pot.orthologs.name <- NA
for(j in 1:n.target)
{
target.protein.name <- target.names[[j]]
target.protein.seq <- c2s(target.seqs[[j]])
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
source.protein.align <- s2c(as.character(pattern(res.align)))
target.protein.align <- s2c(as.character(subject(res.align)))
identity <- sum(target.protein.align == source.protein.align)/length(source.protein.align)
if(identity > pot.orthologs.identity)
{
pot.orthologs.identity <- identity
pot.orthologs.name <- target.protein.name
}
}
pot.orthologs.identities[k] <- pot.orthologs.identity
pot.orthologs.names[k] <- pot.orthologs.name
print(pot.orthologs.identity)
print("----------")
k <- k + 1
}
source.data <- read.fasta(file="vcarteri_protein.fa", seqtype="AA")
source.names <- getName(source.data)
source.seqs <- getSequence(source.data)
n.source <- length(source.seqs)
## Loading details for target protein sequences
target.data <- read.fasta(file="volcadraft_seqs.fasta", seqtype="AA")
target.names <- getName(target.data)
target.seqs <- getSequence(target.data)
n.target <- length(target.names)
pot.orthologs.identities <- vector(mode = "numeric",length = n.source)
pot.orthologs.names <- vector(mode = "character",length = n.source)
lower.bound <- (group - 1)*1000 + 1
upper.bound <- group * 1000
k <- 1
for (i in 1:10)#lower.bound:upper.bound)
{
print(i)
source.protein.name <- source.names[[i]]
source.protein.seq <- c2s(source.seqs[[i]])
pot.orthologs.identity <- 0
pot.orthologs.name <- NA
for(j in 1:n.target)
{
target.protein.name <- target.names[[j]]
target.protein.seq <- c2s(target.seqs[[j]])
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
source.protein.align <- s2c(as.character(pattern(res.align)))
target.protein.align <- s2c(as.character(subject(res.align)))
identity <- sum(target.protein.align == source.protein.align)/length(source.protein.align)
if(identity > pot.orthologs.identity)
{
pot.orthologs.identity <- identity
pot.orthologs.name <- target.protein.name
}
}
pot.orthologs.identities[k] <- pot.orthologs.identity
pot.orthologs.names[k] <- pot.orthologs.name
print(pot.orthologs.identity)
print("----------")
k <- k + 1
}
for (i in 1:3)#lower.bound:upper.bound)
{
print(i)
source.protein.name <- source.names[[i]]
source.protein.seq <- c2s(source.seqs[[i]])
pot.orthologs.identity <- 0
pot.orthologs.name <- NA
for(j in 1:n.target)
{
target.protein.name <- target.names[[j]]
target.protein.seq <- c2s(target.seqs[[j]])
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
source.protein.align <- s2c(as.character(pattern(res.align)))
target.protein.align <- s2c(as.character(subject(res.align)))
identity <- sum(target.protein.align == source.protein.align)/length(source.protein.align)
if(identity > pot.orthologs.identity)
{
pot.orthologs.identity <- identity
pot.orthologs.name <- target.protein.name
}
}
pot.orthologs.identities[k] <- pot.orthologs.identity
pot.orthologs.names[k] <- pot.orthologs.name
print(pot.orthologs.identity)
print("----------")
k <- k + 1
}
pot.orthologs.identities <- vector(mode = "numeric",length = n.source)
pot.orthologs.names <- vector(mode = "character",length = n.source)
lower.bound <- (group - 1)*1000 + 1
upper.bound <- group * 1000
k <- 1
for (i in 1:3)#lower.bound:upper.bound)
{
print(i)
source.protein.name <- source.names[[i]]
source.protein.seq <- c2s(source.seqs[[i]])
pot.orthologs.identity <- 0
pot.orthologs.name <- NA
for(j in 1:n.target)
{
target.protein.name <- target.names[[j]]
target.protein.seq <- c2s(target.seqs[[j]])
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
source.protein.align <- s2c(as.character(pattern(res.align)))
target.protein.align <- s2c(as.character(subject(res.align)))
identity <- sum(target.protein.align == source.protein.align)/length(source.protein.align)
if(identity > pot.orthologs.identity)
{
pot.orthologs.identity <- identity
pot.orthologs.name <- target.protein.name
}
}
pot.orthologs.identities[k] <- pot.orthologs.identity
pot.orthologs.names[k] <- pot.orthologs.name
print(pot.orthologs.identity)
print("----------")
k <- k + 1
}
shiny::runApp('~/Dropbox/github_repos/AlgaeFun/web_app')
runApp('~/Dropbox/github_repos/AlgaeFun/web_app')
runApp('~/Dropbox/github_repos/AlgaeFun/web_app')
runApp('~/Dropbox/github_repos/AlgaeFun/web_app')
runApp('~/Dropbox/github_repos/AlgaeFun/web_app')
