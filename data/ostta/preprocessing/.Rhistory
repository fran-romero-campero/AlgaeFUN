{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
setwd("~/Dropbox/github_repos/AlgaeFun/data/ostta/preprocessing")
## More gtf processing
ostta.gff3 <- read.table(file="ostreococcus_tauri.gff3",header=F,quote = "#",as.is=T)
head(ostta.gff3)
gene.ids <- vector(mode="character",length=nrow(ostta.gff3))
gene.names <- vector(mode="character",length=nrow(ostta.gff3))
protein.ids <- vector(mode="character", length=nrow(ostta.gff3))
rna.ids <- vector(mode="character",length(nrow(ostta.gff3)))
rna.names <- vector(mode="character" ,length(nrow(ostta.gff3)))
rna.parent <- vector(mode="character" ,length(nrow(ostta.gff3)))
rna.protein.id <- vector(mode="character" ,length(nrow(ostta.gff3)))
rna.transcript.id <- vector(mode="character" ,length(nrow(ostta.gff3)))
exon.ids <- vector(mode="character" ,length(nrow(ostta.gff3)))
exon.parent <- vector(mode="character" ,length(nrow(ostta.gff3)))
cds.ids <- vector(mode="character" ,length(nrow(ostta.gff3)))
cds.parent <- vector(mode="character" ,length(nrow(ostta.gff3)))
five.prime.utr.ids <- vector(mode="character" ,length(nrow(ostta.gff3)))
five.prime.utr.parent <- vector(mode="character" ,length(nrow(ostta.gff3)))
three.prime.utr.ids <- vector(mode="character" ,length(nrow(ostta.gff3)))
three.prime.utr.parent <- vector(mode="character" ,length(nrow(ostta.gff3)))
for(i in 1:nrow(ostta.gff3))
{
# extract current feature (gene, mRNA, exon, CDS, five_prime_UTR, three_prime_UTR)
current.feature <- ostta.gff3$V3[i]
current.element <- strsplit(ostta.gff3$V9[i],split=";")[[1]]
if(current.feature == "gene")
{
for(j in 1:length(current.element))
{
current.attribute <- strsplit(current.element[j],split="=")[[1]]
attribute.name <- current.attribute[1]
attribute.value <- current.attribute[2]
if(attribute.name == "ID")
{
gene.ids[i] <- attribute.value
} else if (attribute.name == "Name")
{
gene.names[i] <- attribute.value
} else if (attribute.name == "protein_id")
{
protein.ids[i] <- attribute.value
}
}
} else if(current.feature == "mRNA")
{
for(j in 1:length(current.element))
{
current.attribute <- strsplit(current.element[j],split="=")[[1]]
attribute.name <- current.attribute[1]
attribute.value <- current.attribute[2]
if(attribute.name == "ID")
{
rna.ids[i] <- attribute.value
} else if (attribute.name == "Name")
{
rna.names[i] <- attribute.value
} else if (attribute.name == "Parent")
{
rna.parent[i] <- attribute.value
} else if (attribute.name == "protein_id")
{
rna.protein.id[i] <- attribute.value
} else if (attribute.name == "transcriptId")
{
rna.transcript.id[i] <- attribute.value
}
}
} else if(current.feature == "exon")
{
for(j in 1:length(current.element))
{
current.attribute <- strsplit(current.element[j],split="=")[[1]]
attribute.name <- current.attribute[1]
attribute.value <- current.attribute[2]
if(attribute.name == "ID")
{
exon.ids[i] <- attribute.value
} else if (attribute.name == "Parent")
{
exon.parent[i] <- attribute.value
}
}
} else if(current.feature == "CDS")
{
for(j in 1:length(current.element))
{
current.attribute <- strsplit(current.element[j],split="=")[[1]]
attribute.name <- current.attribute[1]
attribute.value <- current.attribute[2]
if(attribute.name == "ID")
{
cds.ids[i] <- attribute.value
} else if (attribute.name == "Parent")
{
cds.parent[i] <- attribute.value
}
}
} else if(current.feature == "five_prime_UTR")
{
for(j in 1:length(current.element))
{
current.attribute <- strsplit(current.element[j],split="=")[[1]]
attribute.name <- current.attribute[1]
attribute.value <- current.attribute[2]
if(attribute.name == "ID")
{
five.prime.utr.ids[i] <- attribute.value
} else if (attribute.name == "Parent")
{
five.prime.utr.parent[i] <- attribute.value
}
}
} else if(current.feature == "three_prime_UTR")
{
for(j in 1:length(current.element))
{
current.attribute <- strsplit(current.element[j],split="=")[[1]]
attribute.name <- current.attribute[1]
attribute.value <- current.attribute[2]
if(attribute.name == "ID")
{
three.prime.utr.ids[i] <- attribute.value
} else if (attribute.name == "Parent")
{
three.prime.utr.parent[i] <- attribute.value
}
}
}
}
i <- 1
current.feature <- ostta.gff3$V3[i]
current.feature == "gene"
gene.id.info <- paste("gene_id", paste(c("\"",gene.names[i],"\";"),collapse = ""))
protein.id.info <- paste("protein_id", paste(c("\"",gene.names[i],"\";"),collapse = ""))
gene.id.info
protein.id.info
current.feature.info <- paste(gene.id.info, protein.id.info)
current.feature.info
output.ostta.gff3 <- ostta.gff3
gene.id.info <- paste("gene_id", paste(c("\"",gene.names[i],"\";"),collapse = ""))
protein.id.info <- paste("protein_id", paste(c("\"",gene.names[i],"\";"),collapse = ""))
output.ostta.gff3$V9[i] <- paste(gene.id.info, protein.id.info)
head(output.ostta.gff3)
i <- 2
current.feature <- ostta.gff3$V3[i]
ostta.gff3$V3[i]
ostta.gff3[i,]
gene.id.info <- paste("gene_id", paste(c("\"",rna.names[i],"\";"),collapse = ""))
transcript.id.info <- paste("transcript_id", paste(c("\"",rna.transcript.id[i],"\";"),collapse = ""))
gene.id.info
transcript.id.info
gene.id.info <- paste("gene_id", paste(c("\"",rna.names[i],"\";"),collapse = ""))
transcript.id.info <- paste("transcript_id", paste(c("\"",rna.transcript.id[i],"\";"),collapse = ""))
output.ostta.gff3$V9[i] <- paste(gene.id.info, transcript.id.info)
head(output.ostta.gff3)
i <- 3
i <- 3
ostta.gff3[i,]
strsplit(exon.ids[i],split="_")[[1]]
exon.number <- strsplit(exon.ids[i],split="_")[[1]][3]
exon.number
exon.parent[i]
exon.parent[i] == rna.ids
which(exon.parent[i] == rna.ids)
rna.names[which(exon.parent[i] == rna.ids)]
exon.number.info <- strsplit(exon.ids[i],split="_")[[1]][3]
gene.id.info <- rna.names[which(exon.parent[i] == rna.ids)]
transcript.id.info <- rna.transcript.id[[which(exon.parent[i] == rna.ids)]]
transcript.id.info
gene.id.info <- rna.names[which(exon.parent[i] == rna.ids)]
transcript.id.info <- rna.transcript.id[[which(exon.parent[i] == rna.ids)]]
exon.number.info <- strsplit(exon.ids[i],split="_")[[1]][3]
output.ostta.gff3$V9[i] <- paste(c("gene_id", gene.id.info, "transcript_id", transcript.id.info, "exon_number", exon.number.info))
paste(c("gene_id", gene.id.info, "transcript_id", transcript.id.info, "exon_number", exon.number.info))
gene.id.info <- paste("gene_id", paste(c("\"",rna.names[which(exon.parent[i] == rna.ids)],"\";"),collapse = ""))
gene.id.info
transcript.id.info <- paste("transcript_id", paste(c("\"",rna.transcript.id[[which(exon.parent[i] == rna.ids)]],"\";"),collapse = ""))
transcript.id.info
exon.number.info <- paste("exon_number", paste(c("\"",strsplit(exon.ids[i],split="_")[[1]][3],"\";"),collapse = ""))
exon.number.info
paste(c("gene_id", gene.id.info, "transcript_id", transcript.id.info, "exon_number", exon.number.info))
paste(c("gene_id", gene.id.info, "transcript_id", transcript.id.info, "exon_number", exon.number.info),collapse="")
output.ostta.gff3$V9[i] <- paste(c("gene_id", gene.id.info, "transcript_id", transcript.id.info, "exon_number", exon.number.info),collapse=" ")
head(output.ostta.gff3)
output.ostta.gff3$V9[i] <- paste(c(gene.id.info, transcript.id.info, exon.number.info),collapse=" ")
head(output.ostta.gff3)
i <- 4
ostta.gff3[i,]
current.feature <- ostta.gff3$V3[i]
cds.parent[i]
rna.ids
which(cds.parent[i] == rna.ids)
rna.names[which(cds.parent[i] == rna.ids)]
rna.transcript.id[[which(cds.parent[i] == rna.ids)]
rna.transcript.id[[which(cds.parent[i] == rna.ids)
rna.transcript.id[[which(cds.parent[i] == rna.ids)
rna.transcript.id[[which(cds.parent[i] == rna.ids)]]
rna.transcript.id[[which(cds.parent[i] == rna.ids)]]
output.ostta.gff3$V9[i] <- paste(c(gene.id.info, transcript.id.info),collapse=" ")
head(output.ostta.gff3)
output.ostta.gff3 <- ostta.gff3
for(i in 1:nrow(ostta.gff3))
{
current.feature <- ostta.gff3$V3[i]
if(current.feature == "gene")
{
gene.id.info <- paste("gene_id", paste(c("\"",gene.names[i],"\";"),collapse = ""))
protein.id.info <- paste("protein_id", paste(c("\"",gene.names[i],"\";"),collapse = ""))
output.ostta.gff3$V9[i] <- paste(gene.id.info, protein.id.info)
} else if (current.feature == "mRNA")
{
gene.id.info <- paste("gene_id", paste(c("\"",rna.names[i],"\";"),collapse = ""))
transcript.id.info <- paste("transcript_id", paste(c("\"",rna.transcript.id[i],"\";"),collapse = ""))
output.ostta.gff3$V9[i] <- paste(gene.id.info, transcript.id.info)
} else if (current.feature == "exon")
{
gene.id.info <- paste("gene_id", paste(c("\"",rna.names[which(exon.parent[i] == rna.ids)],"\";"),collapse = ""))
transcript.id.info <- paste("transcript_id", paste(c("\"",rna.transcript.id[[which(exon.parent[i] == rna.ids)]],"\";"),collapse = ""))
exon.number.info <- paste("exon_number", paste(c("\"",strsplit(exon.ids[i],split="_")[[1]][3],"\";"),collapse = ""))
output.ostta.gff3$V9[i] <- paste(c(gene.id.info, transcript.id.info, exon.number.info),collapse=" ")
} else if (current.feature == "CDS")
{
gene.id.info <- paste("gene_id", paste(c("\"",rna.names[which(cds.parent[i] == rna.ids)],"\";"),collapse = ""))
transcript.id.info <- paste("transcript_id", paste(c("\"",rna.transcript.id[[which(cds.parent[i] == rna.ids)]],"\";"),collapse = ""))
output.ostta.gff3$V9[i] <- paste(c(gene.id.info, transcript.id.info),collapse=" ")
} else if (current.feature == "five_prime_UTR")
{
gene.id.info <- paste("gene_id", paste(c("\"",rna.names[which(five.prime.utr.parent[i] == rna.ids)],"\";"),collapse = ""))
transcript.id.info <- paste("transcript_id", paste(c("\"",rna.transcript.id[[which(five.prime.utr.parent[i] == rna.ids)]],"\";"),collapse = ""))
output.ostta.gff3$V9[i] <- paste(c(gene.id.info, transcript.id.info),collapse=" ")
} else if (current.feature == "three_prime_UTR")
{
gene.id.info <- paste("gene_id", paste(c("\"",rna.names[which(three.prime.utr.parent[i] == rna.ids)],"\";"),collapse = ""))
transcript.id.info <- paste("transcript_id", paste(c("\"",rna.transcript.id[[which(three.prime.utr.parent[i] == rna.ids)]],"\";"),collapse = ""))
output.ostta.gff3$V9[i] <- paste(c(gene.id.info, transcript.id.info),collapse=" ")
} else
{
print("unknown feature")
}
}
write.table(x = output.ostta.gff3,file = "ostreococcus_tauri.gtf",sep = "\t",row.names = F,col.names = F)
write.table(x = output.ostta.gff3,file = "ostreococcus_tauri.gtf",sep = "\t",row.names = F,col.names = F,quote = F)
