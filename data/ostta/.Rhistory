runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
## Establish correspondence between protein ids and ostta gene/protein names
library("seqinr")
setwd("~/Dropbox/github_repos/AlgaeFun/data/ostta")
proteins.info <- read.fasta(file = "Ostta4221_3_GeneCatalog_proteins_20161028.aa.fasta",seqtype = "AA")
seq.names <- getName(proteins.info)
seq.names[1:5]
i <- 1
current.name <- seq.names[i]
strsplit(current.name,split="|")
strsplit(current.name,split="\\|")
strsplit(seq.names,split="\\|")
splitted.seq.names <- strsplit(seq.names,split="\\|")
splitted.seq.names[[i]]
protein.id <- splitted.seq.names[[i]][3]
proteins.id <- vector(mode="character",length=length(seq.names))
length(seq.names)
## Loop to extract protein ids and ostta names. Initialize accumulators
proteins.id <- vector(mode="character",length=length(seq.names))
ostta.names <- vector(mode="character",length=length(seq.names))
proteins.id[i] <- splitted.seq.names[[i]][3]
proteins.id[i]
splitted.seq.names[[i]][4]
substr(x = splitted.seq.names[[i]][4],start = 4,stop = 16)
## Loop to extract protein ids and ostta names. Initialize accumulators
proteins.id <- vector(mode="character",length=length(seq.names))
ostta.names <- vector(mode="character",length=length(seq.names))
for(i in 1:length(seq.names))
{
proteins.id[i] <- splitted.seq.names[[i]][3]
ostta.names[i] <- substr(x = splitted.seq.names[[i]][4],start = 4,stop = 16)
}
proteins.id
ostta.names
id.ostta.name <- data.frame(id=proteins.id,name=ostta.names)
head(id.ostta.name)
## Generate and write output data frame
id.ostta.name <- data.frame(id=proteins.id,name=ostta.names)
head(id.ostta.name)
write.table(x = id.ostta.name,file = "correspondence_gene_id_ostta_name.tsv",sep="\t",quote=F,row.names = F)
library(org.At.tair.db)
columns(org.At.tair.db)
select(org.At.tair.db,columns = "PATH")
select(org.At.tair.db,columns = "PATH",keys=keys(org.At.tair.db,keytype = "ENTREZID"))
select(org.At.tair.db,columns = c("PATH"),keys=keys(org.At.tair.db,keytype = "ENTREZID"))
select(org.At.tair.db,columns = c("PATH"),keys=keys(org.At.tair.db,keytype = "TAIR"))
columns(org.At.tair.db)
select(org.At.tair.db,columns = c("GO"),keys=keys(org.At.tair.db,keytype = "TAIR"))
head(select(org.At.tair.db,columns = c("GO"),keys=keys(org.At.tair.db,keytype = "TAIR")))
library(org.At.tair.db)
colnames(org.At.tair.db)
head(select(org.At.tair.db,columns = c("GO"),keys=keys(org.At.tair.db,keytype = "TAIR")))
columns(org.At.tair.db)
## Generate GO data.frame to create org.Db package
go.info <- read.table(file="Ostta4221_3_GeneCatalog_proteins_20161028_GO.tab",header = T,as.is = T)
## Generate GO data.frame to create org.Db package
go.info <- read.table(file="Ostta4221_3_GeneCatalog_proteins_20161028_GO.tab",header = T,as.is = T,sep = "\t")
## Generate GO data.frame to create org.Db package
## Before reading the GO annotation file I have to replace the symbol ' by the word prime
## to avoid the error "EOF within quoted string"
go.info <- read.table(file="Ostta4221_3_GeneCatalog_proteins_20161028_GO.tab",header = T,as.is = T,sep = "\t")
head(go.info)
## Generate GO data.frame to create org.Db package
## Before reading the GO annotation file I have to replace the symbol ' by the word prime
## to avoid the error "EOF within quoted string"
go.info <- read.table(file="Ostta4221_3_GeneCatalog_proteins_20161028_GO.tab",header = T,as.is = T,sep = "\t",comment.char = "")
head(go.info)
gid <- vector(mode="character",length=nrow(go.info))
go <- vector(mode="character",length=nrow(go.info))
evidence <- vector(mode="character",length=nrow(go.info))
i <- 1
go.info$X.proteinId[i]
head(id.ostta.name)
id.ostta.name <- read.table(file = "correspondence_gene_id_ostta_name.tsv",sep="\t",header=T,as.is=T)
head(id.ostta.name)
gene.ids <- id.ostta.name$id
gene.ids
gene.names <- id.ostta.name$name
gene.names
names(gene.names) <- gene.ids
gene.names[go.info$X.proteinId[i]]
go.info$X.proteinId[i]
gene.names
gene.names[as.character(go.info$X.proteinId[i])]
go.info$goAcc[i]
head(go.info)
head(select(org.At.tair.db,columns = c("GO"),keys=keys(org.At.tair.db,keytype = "TAIR")))
evidence <- rep("ISS",nrow(go.info))
evidence
evidence <- rep("ISS",nrow(go.info))
for(i in 1:nrow(go.info))
{
gid[i] <- gene.names[as.character(go.info$X.proteinId[i])]
go[i] <- go.info$goAcc[i]
}
library(org.At.tair.db)
gid
go
go.data.frame <- data.frame(GID=gid,GO=go,EVIDENCE=evidence)
head(go.data.frame)
columns(org.At.tair.db)
head(select(org.At.tair.db,columns = c("ENZYME"),keys=keys(org.At.tair.db,keytype = "TAIR")))
kegg.info <- read.table(file = "Ostta4221_3_GeneCatalog_proteins_20161028_KEGG.tab",header = T,sep = "\t",as.is = T)
head(kegg.info)
kegg.info <- read.table(file = "Ostta4221_3_GeneCatalog_proteins_20161028_KEGG.tab",header = T,sep = "\t",as.is = T,comment.char = "")
head(kegg.info)
nrow(go.info)
head(kegg.info)
gid <- vector(mode="character",length=nrow(kegg.info))
enzyme <- vector(mode="character",length=nrow(kegg.info))
gid
enzyme
kegg.info$X.proteinId
kegg.info$X.proteinId[i]
i <- 1
kegg.info$X.proteinId
kegg.info$X.proteinId[i]
as.character(kegg.info$X.proteinId[i])
gene.names[as.character(kegg.info$X.proteinId[i])]
kegg.info$ecNum
kegg.info$ecNum[i]
for(i in 1:nrow(kegg.info))
{
gid[i] <- gene.names[as.character(kegg.info$X.proteinId[i])]
enzyme[i] <- kegg.info$ecNum[i]
}
gid
enzyme
enzyme.data.frame <- data.frame(GID=gid,ENZYME=enzyme)
head(enzyme.data.frame)
columns(org.At.tair.db)
head(select(org.At.tair.db,columns = c("PATH"),keys=keys(org.At.tair.db,keytype = "TAIR")))
head(select(org.At.tair.db,columns = c("TAIR"),keys=keys(org.At.tair.db,keytype = "TAIR")))
columns(org.At.tair.db)
head(select(org.At.tair.db,columns = c("ENTREZID"),keys=keys(org.At.tair.db,keytype = "TAIR")))
kog.info <- read.table(file = "Ostta4221_3_GeneCatalog_proteins_20161028_KOG.tab",header = T,sep = "\t",as.is = T,comment.char = "")
kog.info <- read.table(file = "Ostta4221_3_GeneCatalog_proteins_20161028_KOG.tab",header = T,sep = "\t",as.is = T,comment.char = "")
head(kog.info)
## Generate KOG data.frame
kog.info <- read.table(file = "Ostta4221_3_GeneCatalog_proteins_20161028_KOG.tab",header = T,sep = "\t",as.is = T,comment.char = "")
head(kog.info)
gid <- vector(mode="character",length=nrow(kog.info))
kog <- vector(mode="character",length=nrow(kog.info))
i <- 1
gene.names[as.character(kog.info$X.proteinId[i])]
kog.info$X.proteinId[i]
kog.info$X.proteinId
head(kog.info)
kog.info$proteinId[i]
gene.names[as.character(kog.info$proteinId[i])]
kog.info$kogid[i]
gid <- vector(mode="character",length=nrow(kog.info))
kog <- vector(mode="character",length=nrow(kog.info))
for(i in 1:nrow(kog.info))
{
gid[i] <- gene.names[as.character(kog.info$proteinId[i])]
enzyme[i] <- kog.info$kogid[i]
}
gid <- vector(mode="character",length=nrow(kog.info))
kog <- vector(mode="character",length=nrow(kog.info))
for(i in 1:nrow(kog.info))
{
gid[i] <- gene.names[as.character(kog.info$proteinId[i])]
kog[i] <- kog.info$kogid[i]
}
kog.data.frame <- data.frame(GID=gid,KOG=kog)
head(kog.data.frame)
library(AnnotationForge)
## Ostreococcus tauri Taxonomy ID: 70448
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationForge", version = "3.8")
library(AnnotationForge)
makeOrgPackage(GO=go.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus tauri",
goTable = "GO",
verbose = TRUE)
go.data.frame$GID
makeOrgPackage(GO=go.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus tauri",
goTable = "GO",
verbose = TRUE)
go.data.frame$GID
length(go.data.frame$GID)
length(unique(go.data.frame$GID))
makeOrgPackage(GO=go.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus tauri",
goTable = "GO",
verbose = TRUE)
makeOrgPackage(GO=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus tauri",
goTable = "GO",
verbose = TRUE)
makeOrgPackage(GO=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
version = "0.1",
#               maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
#               author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus_tauri",
goTable = "GO",
verbose = TRUE)
makeOrgPackage(GO=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
#               author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus_tauri",
goTable = "GO",
verbose = TRUE)
makeOrgPackage(GO=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus_tauri",
goTable = "GO",
verbose = TRUE)
legnth(go.data.frame$GID)
length(go.data.frame$GID)
head(select(org.At.tair.db,columns = c("GO"),keys=keys(org.At.tair.db,keytype = "TAIR")))
(select(org.At.tair.db,columns = c("GO"),keys=keys(org.At.tair.db,keytype = "TAIR")))
head(go.data.frame)
head(select(org.At.tair.db,columns = c("GO"),keys=keys(org.At.tair.db,keytype = "TAIR")))
head(select(org.At.tair.db,columns = c("ENZYME"),keys=keys(org.At.tair.db,keytype = "TAIR")))
makeOrgPackage(go=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus_tauri",
goTable = "go",
verbose = TRUE)
makeOrgPackage(go=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus_tauri",
goTable = "go",
verbose = TRUE)
traceback()
data <- go.data.frame
unique(unlist(unname(lapply(data, "[", "GID"))))
data
lapply(data, "[", "GID")
makeOrgPackage(go=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus_tauri",
goTable = "go",
verbose = TRUE)
traceback()
## Makes an organism package for Zebra Finch data.frames:
finchFile <- system.file("extdata","finch_info.txt",package="AnnotationForge")
finch <- read.table(finchFile,sep="\t")
finch
## not that this is how it should always be, but that it *could* be this way.
fSym <- finch[,c(2,3,9)]
fSym <- fSym[fSym[,2]!="-",]
fSym <- fSym[fSym[,3]!="-",]
colnames(fSym) <- c("GID","SYMBOL","GENENAME")
fChr <- finch[,c(2,7)]
fChr <- fChr[fChr[,2]!="-",]
colnames(fChr) <- c("GID","CHROMOSOME")
finchGOFile <- system.file("extdata","GO_finch.txt",package="AnnotationForge")
fGO <- read.table(finchGOFile,sep="\t")
fGO <- fGO[fGO[,2]!="",]
fGO <- fGO[fGO[,3]!="",]
colnames(fGO) <- c("GID","GO","EVIDENCE")
fGO
head(fGO)
head(go.data.frame)
fGO$GID
typeof(fGO$GID)
## Generate GO data.frame to create org.Db package
## Before reading the GO annotation file I have to replace the symbol ' by the word prime
## to avoid the error "EOF within quoted string"
go.info <- read.table(file="Ostta4221_3_GeneCatalog_proteins_20161028_GO.tab",header = T,as.is = T,sep = "\t",comment.char = "")
head(go.info)
go.data.frame <- data.frame(GID=go.info$X.proteinId,GO=go.info$goAcc,EVIDENCE=evidence)
makeOrgPackage(go=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "Ostreococcus_tauri",
goTable = "go",
verbose = TRUE)
## Establish correspondence between protein ids and ostta gene/protein names
library("seqinr")
## Read fasta file and split sequence names with the token |
proteins.info <- read.fasta(file = "Ostta4221_3_GeneCatalog_proteins_20161028.aa.fasta",seqtype = "AA")
seq.names <- getName(proteins.info)
splitted.seq.names <- strsplit(seq.names,split="\\|")
## Loop to extract protein ids and ostta names. Initialize accumulators
proteins.id <- vector(mode="character",length=length(seq.names))
ostta.names <- vector(mode="character",length=length(seq.names))
for(i in 1:length(seq.names))
{
proteins.id[i] <- splitted.seq.names[[i]][3]
ostta.names[i] <- substr(x = splitted.seq.names[[i]][4],start = 4,stop = 16)
}
## Generate and write output data frame
id.ostta.name <- data.frame(id=proteins.id,name=ostta.names)
head(id.ostta.name)
head(fSym)
columns(org.At.tair.db)
head(select(org.At.tair.db,columns = c("GENENAME"),keys=keys(org.At.tair.db,keytype = "TAIR")))
columns(org.At.tair.db)
head(select(org.At.tair.db,columns = c("GO"),keys=keys(org.At.tair.db,keytype = "TAIR")))
head(select(org.At.tair.db,columns = c("SYMBOL"),keys=keys(org.At.tair.db,keytype = "TAIR")))
## Generate and write output data frame
id.ostta.name <- data.frame(GID=proteins.id,GENENAME=ostta.names,SYMBOL=ostta.names)
enzyme.data.frame <- data.frame(GID=kegg.info$X.proteinId,ENZYME=kegg.info$ecNum)
head(enzyme.data.frame)
kog.data.frame <- data.frame(GID=kog.info$proteinId,KOG=kog.info$kogid)
makeOrgPackage(go=go.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
SYMBOL=id.ostta.name,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "tauri",
goTable = "go",
verbose = TRUE)
makeOrgPackage(go=go.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
#               SYMBOL=id.ostta.name,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "tauri",
goTable = "go",
verbose = TRUE)
makeOrgPackage(go=go.data.frame,
ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
#               SYMBOL=id.ostta.name,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "tauri",
goTable = "go",
verbose = TRUE)
makeOrgPackage(go=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
#               SYMBOL=id.ostta.name,
version = "0.1",
maintainer = "Francisco J. Romero-Campero - email:fran@us.es",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "tauri",
goTable = "go",
verbose = TRUE)
install.packages("./org.Otauri.eg.db/", repos=NULL)
makeOrgPackage(go=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
#               SYMBOL=id.ostta.name,
version = "0.1",
maintainer = "Francisco J. Romero-Campero <fran@us.es>",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "tauri",
goTable = "go",
verbose = TRUE)
makeOrgPackage(go=go.data.frame,
#               ENZYME=enzyme.data.frame,
#               KOG=kog.data.frame,
#               SYMBOL=id.ostta.name,
version = "0.1",
maintainer = "Francisco J. Romero-Campero <fran@us.es>",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "70448",
genus = "Ostreococcus",
species = "tauri",
goTable = "go",
verbose = TRUE)
install.packages("./org.Otauri.eg.db/", repos=NULL)
library(org.Otauri.eg.db)
columns(org.Otauri.eg.db)
