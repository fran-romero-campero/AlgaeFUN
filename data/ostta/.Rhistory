plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
setwd("~/Dropbox/github_repos/AlgaeFun/data/ostta")
## Establish correspondence between protein ids and ostta gene/protein names
library("seqinr")
## Read fasta file and split sequence names with the token |
proteins.info <- read.fasta(file = "Ostta4221_3_GeneCatalog_proteins_20161028.aa.fasta",seqtype = "AA")
seq.names <- getName(proteins.info)
splitted.seq.names <- strsplit(seq.names,split="\\|")
## Loop to extract protein ids and ostta names. Initialize accumulators
proteins.id <- vector(mode="character",length=length(seq.names))
ostta.names <- vector(mode="character",length=length(seq.names))
for(i in 1:length(seq.names))
{
proteins.id[i] <- splitted.seq.names[[i]][3]
ostta.names[i] <- substr(x = splitted.seq.names[[i]][4],start = 4,stop = 16)
}
## Read fasta file and split sequence names with token | for transcripts
transcripts.info <- read.fasta(file="Ostta4221_3_GeneCatalog_transcripts_20161028.nt.fasta",seqtype = "DNA")
trans.names <- getName(transcripts.info)
splitted.trans.names <- strsplit(trans.names,split="\\|")
## Loop to extract protein ids and ostta names. Initialize accumulators
transcripts.id <- vector(mode="character",length=length(trans.names))
ostta.trans.names <- vector(mode="character",length=length(trans.names))
trans.names
splitted.trans.names
## Loop to extract protein ids and ostta names. Initialize accumulators
transcripts.id <- vector(mode="character",length=length(trans.names))
ostta.trans.names <- vector(mode="character",length=length(trans.names))
transcripts.id
ostta.trans.names
for(i in 1:length(trans.names))
{
transcripts.id[i] <- splitted.trans.names[[i]][3]
ostta.trans.names[i] <- substr(x = splitted.trans.names[[i]][4],start = 4,stop = 16)
}
transcripts.id
ostta.trans.names
## Loop to extract protein ids and ostta names. Initialize accumulators
transcripts.id <- vector(mode="character",length=length(trans.names))
ostta.trans.names <- vector(mode="character",length=length(trans.names))
for(i in 1:length(trans.names))
{
transcripts.id[i] <- splitted.trans.names[[i]][3]
ostta.trans.names[i] <- substr(x = splitted.trans.names[[i]][4],start = 4,stop = 18)
}
## Generate and write output data frame
id.ostta.name <- data.frame(GID=proteins.id,GENENAME=ostta.names,stringsAsFactors = FALSE)
ostta.trans.names
id.trans.ostta.name <- data.frame(TID=transcripts.id,TRANSNAME=ostta.trans.names,stringsAsFactors = F)
write.table(x = id.trans.ostta.name, file="correspondence_trans_id_ostta_name.tsv",sep="\t",quote=F,row.names = F)
id.trans.ostta.name
id.ostta.name <- read.table(file = "correspondence_gene_id_ostta_name.tsv",sep="\t",header=T,as.is=T)
head(id.ostta.name)
## Preprocess gff3
library(stringr)
ostta.gff3 <- read.table(file="ostreococcus_tauri.gff3",header=F,quote = "#")
head(ostta.gff3)
id.ostta.name$GID
id.ostta.name$GENENAME
gene.names <- id.ostta.name$GENENAME
gene.names <- id.ostta.name$GENENAME
names(gene.names) <- id.ostta.name$GID
trans.names <- id.trans.ostta.name$TRANSNAME
names(trans.names) <- id.trans.ostta.name$TID
i <- 1
ostta.gff3$V9[i]
ostta.gff3 <- read.table(file="ostreococcus_tauri.gff3",header=F,quote = "#",as.is=T)
head(ostta.gff3)
ostta.gff3$V9[i]
current.element <- ostta.gff3$V9[i]
strsplit(current.element,split="proteinID")
strsplit(current.element,split="proteinId=")
strsplit(current.element,split="proteinId=")[[1]][2]
strsplit(strsplit(current.element,split="proteinId=")[[1]][2],split=";")
strsplit(strsplit(current.element,split="proteinId=")[[1]][2],split=";")[[1]][1]
current.protein.id  <- strsplit(strsplit(current.element,split="proteinId=")[[1]][2],split=";")[[1]][1]
current.trans.id <- strsplit(strsplit(current.element,split="transcriptId=")[[1]][2],split=";")[[1]][1]
current.trans.id
current.protein.name <- gene.names[current.protein.id]
current.protein.name
current.protein.name <- gene.names[[current.protein.id]]
current.protein.name
current.trans.name <- trans.names[[current.trans.id]]
current.trans.name
current.element <- str_replace_all(string = current.element,pattern = current.trans.id,replacement = current.trans.name)
i <- 1
current.element <- ostta.gff3$V9[i]
current.protein.id  <- strsplit(strsplit(current.element,split="proteinId=")[[1]][2],split=";")[[1]][1]
current.protein.name <- gene.names[[current.protein.id]]
current.trans.id <- strsplit(strsplit(current.element,split="transcriptId=")[[1]][2],split=";")[[1]][1]
current.trans.name <- trans.names[[current.trans.id]]
current.element <- str_replace_all(string = current.element,pattern = current.protein.id,replacement = current.protein.name)
current.element <- str_replace_all(string = current.element,pattern = current.trans.id,replacement = current.trans.name)
current.element
## Replace ids with names
for(i in 1:nrow(ostta.gff3))
{
current.element <- ostta.gff3$V9[i]
current.protein.id  <- strsplit(strsplit(current.element,split="proteinId=")[[1]][2],split=";")[[1]][1]
current.protein.name <- gene.names[[current.protein.id]]
current.trans.id <- strsplit(strsplit(current.element,split="transcriptId=")[[1]][2],split=";")[[1]][1]
current.trans.name <- trans.names[[current.trans.id]]
current.element <- str_replace_all(string = current.element,pattern = current.protein.id,replacement = current.protein.name)
current.element <- str_replace_all(string = current.element,pattern = current.trans.id,replacement = current.trans.name)
ostta.gff3$V9[i] <- current.element
}
i
current.element <- ostta.gff3$V9[i]
current.element
current.protein.id  <- strsplit(strsplit(current.element,split="proteinId=")[[1]][2],split=";")[[1]][1]
current.protein.id
current.protein.name <- gene.names[[current.protein.id]]
## Replace ids with names
for(i in 1:nrow(ostta.gff3))
{
current.element <- ostta.gff3$V9[i]
current.protein.id  <- strsplit(strsplit(current.element,split="proteinId=")[[1]][2],split=";")[[1]][1]
# Some rows do not represent a transcript and do not need any replacement
if(!is.na(current.protein.id))
{
current.protein.name <- gene.names[[current.protein.id]]
current.trans.id <- strsplit(strsplit(current.element,split="transcriptId=")[[1]][2],split=";")[[1]][1]
current.trans.name <- trans.names[[current.trans.id]]
current.element <- str_replace_all(string = current.element,pattern = current.protein.id,replacement = current.protein.name)
current.element <- str_replace_all(string = current.element,pattern = current.trans.id,replacement = current.trans.name)
ostta.gff3$V9[i] <- current.element
}
}
i
# Correspondence between gene/transcript names and ids
gene.names <- id.ostta.name$GENENAME
names(gene.names) <- id.ostta.name$GID
trans.names <- id.trans.ostta.name$TRANSNAME
names(trans.names) <- id.trans.ostta.name$TID
## Replace ids with names
for(i in 1:nrow(ostta.gff3))
{
current.element <- ostta.gff3$V9[i]
current.protein.id  <- strsplit(strsplit(current.element,split="proteinId=")[[1]][2],split=";")[[1]][1]
# Some rows do not represent a transcript and do not need any replacement
if(!is.na(current.protein.id))
{
current.protein.name <- gene.names[[current.protein.id]]
current.trans.id <- strsplit(strsplit(current.element,split="transcriptId=")[[1]][2],split=";")[[1]][1]
current.trans.name <- trans.names[[current.trans.id]]
current.element <- str_replace_all(string = current.element,pattern = current.protein.id,replacement = current.protein.name)
current.element <- str_replace_all(string = current.element,pattern = current.trans.id,replacement = current.trans.name)
ostta.gff3$V9[i] <- current.element
}
}
ostta.gff3 <- read.table(file="ostreococcus_tauri.gff3",header=F,quote = "#",as.is=T)
head(ostta.gff3)
# Correspondence between gene/transcript names and ids
gene.names <- id.ostta.name$GENENAME
names(gene.names) <- id.ostta.name$GID
trans.names <- id.trans.ostta.name$TRANSNAME
names(trans.names) <- id.trans.ostta.name$TID
## Replace ids with names
for(i in 1:nrow(ostta.gff3))
{
current.element <- ostta.gff3$V9[i]
current.protein.id  <- strsplit(strsplit(current.element,split="proteinId=")[[1]][2],split=";")[[1]][1]
# Some rows do not represent a transcript and do not need any replacement
if(!is.na(current.protein.id))
{
current.protein.name <- gene.names[[current.protein.id]]
current.trans.id <- strsplit(strsplit(current.element,split="transcriptId=")[[1]][2],split=";")[[1]][1]
current.trans.name <- trans.names[[current.trans.id]]
current.element <- str_replace_all(string = current.element,pattern = current.protein.id,replacement = current.protein.name)
current.element <- str_replace_all(string = current.element,pattern = current.trans.id,replacement = current.trans.name)
ostta.gff3$V9[i] <- current.element
}
}
i
head(ostta.gff3)
ostta.gff3 <- read.table(file="ostreococcus_tauri.gff3",header=F,quote = "#",as.is=T)
ostta.gff3.0 <- read.table(file="ostreococcus_tauri.gff3",header=F,quote = "#",as.is=T)
ostta.gff3 <- ostta.gff3.0
head(ostta.gff3)
# Correspondence between gene/transcript names and ids
gene.names <- id.ostta.name$GENENAME
names(gene.names) <- id.ostta.name$GID
trans.names <- id.trans.ostta.name$TRANSNAME
names(trans.names) <- id.trans.ostta.name$TID
## Replace ids with names
for(i in 1:nrow(ostta.gff3))
{
current.element <- ostta.gff3$V9[i]
current.protein.id  <- strsplit(strsplit(current.element,split="proteinId=")[[1]][2],split=";")[[1]][1]
# Some rows do not represent a transcript and do not need any replacement
if(!is.na(current.protein.id))
{
current.protein.name <- gene.names[[current.protein.id]]
current.trans.id <- strsplit(strsplit(current.element,split="transcriptId=")[[1]][2],split=";")[[1]][1]
current.trans.name <- trans.names[[current.trans.id]]
current.element <- str_replace_all(string = current.element,pattern = current.protein.id,replacement = current.protein.name)
current.element <- str_replace_all(string = current.element,pattern = current.trans.id,replacement = current.trans.name)
ostta.gff3$V9[i] <- current.element
}
}
ostta.gff3$V9[1]
ostta.gff3.0$V9[1]
write.table(x = ostta.gff3,file = "ostreococcus_tauri_ids.gff3",quote = F,sep = "\t",row.names = F,col.names = F)
## Generate TxDb package from gff3 file
library("GenomicFeatures")
ostta.genome.data <- read.fasta(file = "ostreococcus_tauri_genome.fasta",seqtype = "DNA")
chromosome.names <- getName(cre.genome.data)
chromosome.names <- getName(ostta.genome.data)
chromosome.lengths <- sapply(X=getSequence(ostta.genome.data),FUN = length)
chromosome.lengths
chromosomes.info <- data.frame(chrom=chromosome.names,length=chromosome.lengths,is_circular=FALSE)
## Meta data info
meta.data.info <- data.frame(name=c("Resource URL","Genome"),value=c("https://genome.jgi.doe.gov/Ostta4221_3/Ostta4221_3.home.html","v3.0"))
write.table(x = ostta.gff3,file = "ostreococcus_tauri_annotation.gff3",quote = F,sep = "\t",row.names = F,col.names = F)
ostta.txdb <- makeTxDbFromGFF(file = "ostreococcus_tauri_annotation.gff3",format = "gff3",dataSource = "JGI",organism = "Ostreococcus tauri",taxonomyId = 70448,chrominfo = chromosomes.info,metadata = meta.data.info)
ostta.txdb
genes(ostta.txdb)
ostta.txdb <- makeTxDbFromGFF(file = "ostreococcus_tauri_annotation.gff3",format = "gff3",dataSource = "JGI",organism = "Ostreococcus tauri",taxonomyId = 70448,chrominfo = chromosomes.info,metadata = meta.data.info)
ostta.txdb
genes(ostta.txdb)
makeTxDbPackage(txdb = ostta.txdb, version = "0.1", maintainer = "Francisco J. Romero-Campero <fran@us.es>", author = "Francisco J. Romero-Campero")
install.packages("./TxDb.Otauri.JGI/", repos=NULL)
## loading packages
#library(ChIPseeker)
library(TxDb.Otauri.JGI)
txdb <- TxDb.Otauri.JGI
txdb
genes(txdb)
