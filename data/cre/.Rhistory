} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 + hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
cre.info <- read.table(file="Creinhardtii_281_v5.6.annotation_info.txt",header=T,comment.char = "",sep = "\t",as.is=T)
setwd("~/Dropbox/github_repos/AlgaeFun/data/cre")
cre.info <- read.table(file="Creinhardtii_281_v5.6.annotation_info.txt",header=T,comment.char = "",sep = "\t",as.is=T)
head(cre.info)
## Generate and write output data frame
id.cre.name <- data.frame(GID=cre.info$locusName,GENENAME=cre.info$locusName,stringsAsFactors = FALSE)
head(id.cre.name)
## Generate SYMBOL data frame
symbol.data.frame <- data.frame(GID=cre.info$locusName,SYMBOL=cre.info$locusName,stringsAsFactors = FALSE)
head(symbol.data.frame)
symbol.data.frame[1:20,]
## Remove duplicated rows
symbol.data.frame <- symbol.data.frame[!duplicated(symbol.data.frame),]
nrow(symbol.data.frame)
## Generate data frame for correspondence between Cre gene ids and Chlredraft gene ids used in KEGG
## Stablish correspondence betwee cre annotaiton and chlredraft
library(seqinr)
target.data <- read.fasta(file="GCF_000002595.1_v3.0_translated_cds.faa", seqtype="AA")
seq.annot <- getAnnot(target.data)
seq.names <- getName(target.data)
chlredraft <- vector(mode="character",length=length(seq.names))
for(i in 1:length(seq.annot))
{
chlredraft[i] <- strsplit(strsplit(seq.annot[[i]],split="locXs_tag=")[[1]][2],split="]")[[1]][1]
}
names(chlredraft) <- seq.names
identity <- read.table(file="results_identity.txt",header = F,as.is = T)
get.first <- function(elto)
{
return(elto[[1]])
}
cre.names <- sapply(strsplit(identity[[1]],split=".t"),get.first)
chlredraft.cre <- chlredraft[identity[[2]]]
names(chlredraft.cre) <- cre.names
sum(is.na(chlredraft.cre))
sorted.chlredraft <- chlredraft.cre[symbol.data.frame$GID]
sum(is.na(sorted.chlredraft))
sorted.chlredraft
names(sorted.chlredraft) <- NULL
sorted.chlredraft
## Generate CHLREDRAFT data frame
chlredraft.data.frame <- data.frame(GID=cre.info$locusName,CHLREDRAFT=sorted.chlredraft,stringsAsFactors = FALSE)
## Generate CHLREDRAFT data frame
chlredraft.data.frame <- data.frame(GID=symbol.data.frame$GID,CHLREDRAFT=sorted.chlredraft,stringsAsFactors = FALSE)
head(symbol.data.frame)
head(chlredraft.data.frame)
chlredraft.data.frame[1:20,]
gid <- cre.info$locusName
go <- cre.info$GO
evidence <- rep("ISS",length(gid))
go.data.frame <- data.frame(GID=gid,GO=go,EVIDENCE=evidence,stringsAsFactors = FALSE)
head(go.data.frame)
go.data.frame <- subset(go.data.frame, GO != "")
head(go.data.frame)
go.expanded.data.frame <- c()
for(i in 1:nrow(go.data.frame))
{
go.splitted <- strsplit(go.data.frame$GO[i],split=",")[[1]]
if(length(go.splitted) > 0)
{
for(j in 1:length(go.splitted))
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],go.splitted[j]))
}
} else
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],""))
}
}
head(go.expanded.data.frame)
go.data.frame <- data.frame(GID=go.expanded.data.frame[,1],
GO=go.expanded.data.frame[,2],
EVIDENCE=rep("ISS",nrow(go.expanded.data.frame)),stringsAsFactors = FALSE)
head(go.data.frame)
## Remove duplicated rows
go.data.frame <- go.data.frame[!duplicated(go.data.frame),]
go.data.frame[1:40,]
nrow(go.data.frame)
length(unique(go.data.frame$GID))
enzyme <- cre.info$ec
enzyme.data.frame <- data.frame(GID=gid,ENZYME=enzyme,stringsAsFactors = FALSE)
head(enzyme.data.frame)
## Remove duplicated rows
enzyme.data.frame <- enzyme.data.frame[!duplicated(enzyme.data.frame),]
head(enzyme.data.frame)
nrow(enzyme.data.frame)
duplicated(enzyme.data.frame)
sum(duplicated(enzyme.data.frame))
length(unique(enzyme.data.frame$GID))
## Generate KOG data.frame
kog <- cre.info$KOG
kog.data.frame <- data.frame(GID=gid,KOG=kog,stringsAsFactors = FALSE)
head(kog.data.frame)
## Remove duplicated rows
kog.data.frame <- kog.data.frame[!duplicated(kog.data.frame),]
library(AnnotationForge)
makeOrgPackage(go=go.data.frame,
SYMBOL=symbol.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
CHLREDRAFT=chlredraft.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero <fran@us.es>",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "3055",
genus = "Chlamydomonas",
species = "reinhardtii",
goTable = "go",
verbose = TRUE)
install.packages("./org.Creinhardtii.eg.db/", repos=NULL)
library(org.Creinhardtii.eg.db)
columns(org.Creinhardtii.eg.db)
head(select(org.Creinhardtii.eg.db,columns = c("GO"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("SYMBOL"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Otauri.eg.db,columns = c("ENZYME"),keys=keys(org.Otauri.eg.db,keytype = "GID")))
columns(org.Creinhardtii.eg.db)
head(select(org.Creinhardtii.eg.db,columns = c("CHLREDRAFT"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("ENZYME"),keys=keys(org.Otauri.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("CHLREDRAFT"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("ENZYME"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("EVIDENCE"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("EVIDENCEALL"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("GO"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("GOALL"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("KOG"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("ONTOLOGY"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("ONTOLOGYALL"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
head(select(org.Creinhardtii.eg.db,columns = c("SYMBOL"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
library(clusterProfiler)
cre.universe <- unique(select(org.Creinhardtii.eg.db,columns = c("GO"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID"))[["GID"]])
length(cre.universe)
keytypes(org.Creinhardtii.eg.db)
cre.example <- read.table(file = "clusters/cre_trough_dark_light_peak_light_dark.txt",header = FALSE,as.is = TRUE)[[1]]
ego <- enrichGO(gene          = unique(c(cre.example)),
universe      = cre.universe,
OrgDb         = org.Creinhardtii.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05,
readable      = TRUE,
keyType = "GID")
barplot(ego,drop=TRUE,showCategory = 10)
goplot(ego)
help(goplot)
goplot(x=ego,showCategory = 5)
goplot(x=ego,showCategory = 10)
dotplot(ego)
emapplot(ego)
cnetplot(ego)
library("pathview")
help(enrichKEGG)
kk <- enrichKEGG(gene = cre.example, organism = "cre",keyType = "kegg",
universe = cre.universe,qvalueCutoff = 0.05)
cre.chlredraft.map <- select(org.Creinhardtii.eg.db,columns = c("CHLREDRAFT"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID"))
head(cre.chlredraft.map)
cre.ids <- cre.chlredraft.map$GID
chlredraft.ids <- cre.chlredraft.map$CHLREDRAFT
names(chlredraft.ids) <- cre.ids
kk <- enrichKEGG(gene = chlredraft.ids[cre.example], organism = "cre",keyType = "kegg",
universe = cre.universe,qvalueCutoff = 0.05)
chlredraft.ids[cre.example]
cre.example.kegg <- chlredraft.ids[cre.example]
names(cre.example.kegg) <- NULL
kk <- enrichKEGG(gene = cre.example.kegg , organism = "cre",keyType = "kegg",
universe = cre.universe,qvalueCutoff = 0.05)
cre.example
cre.example.kegg
kk <- enrichKEGG(gene = cre.example.kegg , organism = "cre",keyType = "kegg",
universe = cre.chlredraft.map$CHLREDRAFT,qvalueCutoff = 0.05)
draft.ids <- chlredraft.cre[cre.example]
names(draft.ids) <- NULL
draft.ids <- draft.ids[!is.na(draft.ids)]
draft.universe <- chlredraft.cre[cre.universe]
names(draft.universe) <- NULL
draft.universe <- draft.universe[!is.na(draft.universe)]
kk <- enrichKEGG(gene = draft.ids, organism = "cre",keyType = "kegg",
universe = draft.universe,qvalueCutoff = 0.05)
kk <- enrichKEGG(gene = cre.example.kegg , organism = "cre",keyType = "kegg",
universe = cre.chlredraft.map$CHLREDRAFT,qvalueCutoff = 0.05)
head(kk)
kk <- enrichKEGG(gene = draft.ids, organism = "cre",keyType = "kegg",
universe = draft.universe,qvalueCutoff = 0.05)
kk2 <- enrichKEGG(gene = draft.ids, organism = "cre",keyType = "kegg",
universe = draft.universe,qvalueCutoff = 0.05)
head(kk)
as.data.frame(kk)
as.data.frame(kk2)
all.equal(kk,kk2)
kk2 <- enrichKEGG(gene = draft.ids, organism = "cre",keyType = "kegg",
qvalueCutoff = 0.05)
as.data.frame(kk)
as.data.frame(kk2)
all.equal(kk,kk2)
all.equal(as.data.frame(kk),as.data.frame(kk2))
kk <- enrichKEGG(gene = draft.ids, organism = "cre",keyType = "kegg",
universe = draft.universe,qvalueCutoff = 0.05)
mkk <- enrichMKEGG(gene = draft.ids, organism = "cre",keyType = "kegg",universe = draft.universe,qvalueCutoff = 0.05)
head(mkk)
