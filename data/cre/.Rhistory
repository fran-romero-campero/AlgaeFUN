cre.info <- read.table(file="Creinhardtii_281_v5.6.annotation_info.txt",header=T,comment.char = "",sep = "\t",as.is=T)
head(cre.info)
## Generate and write output data frame
id.cre.name <- data.frame(GID=cre.info$locusName,GENENAME=cre.info$locusName,stringsAsFactors = FALSE)
head(id.cre.name)
## Generate SYMBOL data frame
symbol.data.frame <- data.frame(GID=cre.info$locusName,SYMBOL=cre.info$locusName,stringsAsFactors = FALSE)
head(symbol.data.frame)
duplicated(symbol.data.frame)
duplicated(symbol.data.frame)[1:10]
duplicated(symbol.data.frame)[1:15]
duplicated(symbol.data.frame)[1:25]
symbol.data.frame[1:20,]
## Remove duplicated rows
symbol.data.frame <- symbol.data.frame[!duplicated(symbol.data.frame),]
nrow(symbol.data.frame)
gid <- cre.info$locusName
go <- cre.info$GO
evidence <- rep("ISS",length(gid))
for(i in 1:nrow(go.info))
{
gid[i] <- gene.names[as.character(go.info$X.proteinId[i])]
go[i] <- go.info$goAcc[i]
}
go.data.frame <- data.frame(GID=gid,GO=go,EVIDENCE=evidence,stringsAsFactors = FALSE)
head(go.data.frame)
go.expanded.data.frame <- c()
for(i in 1:nrow(go.data.frame))
{
go.splitted <- strsplit(go[i],split=",")[[1]]
if(length(go.splitted) > 0)
{
for(j in 1:length(go.splitted))
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],go.splitted[j]))
}
}
}
head(go.expanded.data.frame)
go.data.frame <- data.frame(GID=go.expanded.data.frame[,1],
GO=go.expanded.data.frame[,2],
EVIDENCE=rep("ISS",nrow(go.expanded.data.frame)),stringsAsFactors = FALSE)
head(go.data.frame)
duplicated(go.data.frame)[1:20]
duplicated(go.data.frame)[1:25]
duplicated(go.data.frame)[1:35]
duplicated(go.data.frame)[1:45]
go.data.frame[1:40,]
duplicated(go.data.frame)[1:40]
## Remove duplicated rows
go.data.frame <- go.data.frame[!duplicated(go.data.frame),]
nrow(go.data.frame)
length(unique(go.data.frame$GID))
head(go.data.frame)
go.expanded.data.frame <- c()
for(i in 1:nrow(go.data.frame))
{
go.splitted <- strsplit(go[i],split=",")[[1]]
if(length(go.splitted) > 0)
{
for(j in 1:length(go.splitted))
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],go.splitted[j]))
}
} else
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],""))
}
}
head(go.expanded.data.frame)
go.data.frame <- data.frame(GID=go.expanded.data.frame[,1],
GO=go.expanded.data.frame[,2],
EVIDENCE=rep("ISS",nrow(go.expanded.data.frame)),stringsAsFactors = FALSE)
head(go.data.frame)
head(go.expanded.data.frame)
go.expanded.data.frame <- c()
i <- 1
go.splitted <- strsplit(go[i],split=",")[[1]]
go.splitted
gid <- cre.info$locusName
go <- cre.info$GO
gid
go
gid
is.vector(go)
go
evidence <- rep("ISS",length(gid))
gid <- cre.info$locusName
go <- cre.info$GO
evidence <- rep("ISS",length(gid))
go.data.frame <- data.frame(GID=gid,GO=go,EVIDENCE=evidence,stringsAsFactors = FALSE)
head(go.data.frame)
go.expanded.data.frame <- c()
for(i in 1:nrow(go.data.frame))
{
go.splitted <- strsplit(go[i],split=",")[[1]]
if(length(go.splitted) > 0)
{
for(j in 1:length(go.splitted))
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],go.splitted[j]))
}
} else
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],""))
}
}
head(go.expanded.data.frame)
head(go.expanded.data.frame)
go.data.frame <- data.frame(GID=go.expanded.data.frame[,1],
GO=go.expanded.data.frame[,2],
EVIDENCE=rep("ISS",nrow(go.expanded.data.frame)),stringsAsFactors = FALSE)
head(go.data.frame)
## Remove duplicated rows
go.data.frame <- go.data.frame[!duplicated(go.data.frame),]
go.data.frame[1:40,]
nrow(go.data.frame)
length(unique(go.data.frame$GID))
enzyme <- cre.info$ec
enzyme.data.frame <- data.frame(GID=gid,ENZYME=enzyme,stringsAsFactors = FALSE)
head(enzyme.data.frame)
## Remove duplicated rows
enzyme.data.frame <- enzyme.data.frame[!duplicated(enzyme.data.frame),]
head(enzyme.data.frame)
nrow(enzyme.data.frame)
duplicated(enzyme.data.frame)
sum(duplicated(enzyme.data.frame))
enzyme.data.frame$GID
go.data.frame$GID
setdiff(enzyme.data.frame$GID, go.data.frame$GID)
length(unique(enzyme.data.frame$GID))
## Generate KOG data.frame
kog <- cre.info$KOG
kog.data.frame <- data.frame(GID=gid,KOG=kog,stringsAsFactors = FALSE)
head(kog.data.frame)
## Remove duplicated rows
kog.data.frame <- kog.data.frame[!duplicated(kog.data.frame),]
library(AnnotationForge)
makeOrgPackage(go=go.data.frame,
SYMBOL=symbol.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero <fran@us.es>",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "3055",
genus = "Chlamydomonas",
species = "reinhardtii",
goTable = "go",
verbose = TRUE)
subset(go.data.frame, GO != "")
go.data.frame <- subset(go.data.frame, GO != "")
makeOrgPackage(go=go.data.frame,
SYMBOL=symbol.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero <fran@us.es>",
author = "Francisco J. Romero-Campero",
outputDir = ".",
tax_id = "3055",
genus = "Chlamydomonas",
species = "reinhardtii",
goTable = "go",
verbose = TRUE)
warnings()
install.packages("./org.Creinhardtii.eg.db/", repos=NULL)
library(org.Creinhardtii.eg.db)
columns(org.Creinhardtii.eg.db)
head(select(org.Creinhardtii.eg.db,columns = c("GO"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID")))
cre.example <- read.table(file = "clusters/cre_trough_dark_light_peak_light_dark.txt",header = FALSE,as.is = TRUE)[[1]]
cre.universe <- unique(select(org.Creinhardtii.eg.db,columns = c("GO"),keys=keys(org.Creinhardtii.eg.db,keytype = "GID"))[["GID"]])
length(cre.universe)
library(clusterProfiler)
ego <- enrichGO(gene          = unique(c(cre.example)),
universe      = cre.universe,
OrgDb         = org.Creinhardtii.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05,
readable      = TRUE,
keyType = "GID")
barplot(ego,drop=TRUE,showCategory = 10)
goplot(ego)
dotplot(ego)
emapplot(ego)
cnetplot(ego)
library("pathview")
kk <- enrichKEGG(gene = cre.example, organism = "cre",keyType = "kegg",
universe = cre.universe,qvalueCutoff = 0.05)
setwd("~/Dropbox/github_repos/AlgaeFun/data/cre")
## Loading require packages seqinr and Biostrings
library(seqinr)
library(Biostrings)
## Loading substitution matrix PAM250
data(BLOSUM62)
## Loading details for source protein sequence
source.data <- read.fasta(file="Creinhardtii_281_v5.6.protein.fa", seqtype="AA")
source.seqs <- getSequence(source.data)
n.source <- length(source.seqs)
n.source
source.names <- getName(source.data)
source.names
## Loading substitution matrix PAM250
data(BLOSUM62)
n.source
## Loading details for target protein sequences
target.data <- read.fasta(file="GCF_000002595.1_v3.0_translated_cds.faa", seqtype="AA")
target.names <- getName(target.data)
target.seqs <- getSequence(target.data)
n.target <- length(target.names)
n.target
pot.orthologs.identities <- vector(mode = "numeric",length = 1000)
pot.orthologs.names <- vector(mode = "character",length = 1000)
i <- 1
source.protein.name <- source.names[[i]]
source.protein.name
source.protein.seq <- c2s(source.seqs[[i]])
source.protein.seq
pot.orthologs.identity <- 0
pot.orthologs.name <- NA
j <- 1
target.protein.name <- target.names[[j]]
target.protein.seq <- c2s(target.seqs[[j]])
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
source.protein.align <- s2c(as.character(pattern(res.align)))
target.protein.align <- s2c(as.character(subject(res.align)))
identity <- sum(target.protein.align == source.protein.align)/length(source.protein.align)
identity
for (i in 1:n.source)
{
print(i)
source.protein.name <- source.names[[i]]
source.protein.seq <- c2s(source.seqs[[i]])
pot.orthologs.identity <- 0
pot.orthologs.name <- NA
for(j in 1:n.target)
{
target.protein.name <- target.names[[j]]
target.protein.seq <- c2s(target.seqs[[j]])
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
source.protein.align <- s2c(as.character(pattern(res.align)))
target.protein.align <- s2c(as.character(subject(res.align)))
identity <- sum(target.protein.align == source.protein.align)/length(source.protein.align)
if(identity > pot.orthologs.identity)
{
pot.orthologs.identity <- identity
pot.orthologs.name <- target.protein.name
}
}
pot.orthologs.identities[i] <- pot.orthologs.identity
pot.orthologs.names[i] <- pot.orthologs.name
print(pot.orthologs.identity)
print("----------")
}
print(target.protein.name)
pot.orthologs.identities
pot.orthologs.names
pot.orthologs.identities <- vector(mode = "numeric",length = n.source)
pot.orthologs.names <- vector(mode = "character",length = n.source)
pot.orthologs.identities <- vector(mode = "numeric",length = n.source)
pot.orthologs.names <- vector(mode = "character",length = n.source)
for (i in 1:n.source)
{
print(i)
source.protein.name <- source.names[[i]]
source.protein.seq <- c2s(source.seqs[[i]])
pot.orthologs.identity <- 0
pot.orthologs.name <- NA
for(j in 1:n.target)
{
target.protein.name <- target.names[[j]]
print(target.protein.name)
target.protein.seq <- c2s(target.seqs[[j]])
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
source.protein.align <- s2c(as.character(pattern(res.align)))
target.protein.align <- s2c(as.character(subject(res.align)))
identity <- sum(target.protein.align == source.protein.align)/length(source.protein.align)
if(identity > pot.orthologs.identity)
{
pot.orthologs.identity <- identity
pot.orthologs.name <- target.protein.name
}
}
pot.orthologs.identities[i] <- pot.orthologs.identity
pot.orthologs.names[i] <- pot.orthologs.name
print(pot.orthologs.identity)
print("----------")
}
target.protein.seq
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
target.protein.seq
BLOSUM62
target.seqs[[j]]
colnames(BLOSUM62)
setdiff(target.seqs[[j]],colnames(BLOSUM62))
colnames(BLOSUM62)
## Loading details for source protein sequence
source.data <- read.fasta(file="Creinhardtii_281_v5.6.protein.fa", seqtype="AA")
source.names <- getName(source.data)
source.seqs <- getSequence(source.data)
n.source <- length(source.seqs)
## Loading details for target protein sequences
target.data <- read.fasta(file="GCF_000002595.1_v3.0_translated_cds.faa", seqtype="AA")
target.names <- getName(target.data)
target.seqs <- getSequence(target.data)
n.target <- length(target.names)
pot.orthologs.identities <- vector(mode = "numeric",length = n.source)
pot.orthologs.names <- vector(mode = "character",length = n.source)
for (i in 1:n.source)
{
print(i)
source.protein.name <- source.names[[i]]
source.protein.seq <- c2s(source.seqs[[i]])
pot.orthologs.identity <- 0
pot.orthologs.name <- NA
for(j in 1:n.target)
{
target.protein.name <- target.names[[j]]
print(target.protein.name)
target.protein.seq <- c2s(target.seqs[[j]])
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
source.protein.align <- s2c(as.character(pattern(res.align)))
target.protein.align <- s2c(as.character(subject(res.align)))
identity <- sum(target.protein.align == source.protein.align)/length(source.protein.align)
if(identity > pot.orthologs.identity)
{
pot.orthologs.identity <- identity
pot.orthologs.name <- target.protein.name
}
}
pot.orthologs.identities[i] <- pot.orthologs.identity
pot.orthologs.names[i] <- pot.orthologs.name
print(pot.orthologs.identity)
print("----------")
}
pot.orthologs.identities <- vector(mode = "numeric",length = n.source)
pot.orthologs.names <- vector(mode = "character",length = n.source)
for (i in 1:n.source)
{
print(i)
source.protein.name <- source.names[[i]]
source.protein.seq <- c2s(source.seqs[[i]])
pot.orthologs.identity <- 0
pot.orthologs.name <- NA
for(j in 1:n.target)
{
target.protein.name <- target.names[[j]]
target.protein.seq <- c2s(target.seqs[[j]])
## Computing best global aligment using Needleman-Wunsch algorithm and the identity between the
## current target protein and the source protein
res.align <- pairwiseAlignment(pattern=source.protein.seq, subject=target.protein.seq, substitutionMatrix=BLOSUM62, gapOpening=0)
source.protein.align <- s2c(as.character(pattern(res.align)))
target.protein.align <- s2c(as.character(subject(res.align)))
identity <- sum(target.protein.align == source.protein.align)/length(source.protein.align)
if(identity > pot.orthologs.identity)
{
pot.orthologs.identity <- identity
pot.orthologs.name <- target.protein.name
}
}
pot.orthologs.identities[i] <- pot.orthologs.identity
pot.orthologs.names[i] <- pot.orthologs.name
print(pot.orthologs.identity)
print("----------")
}
pot.orthologs.names[1:10]
