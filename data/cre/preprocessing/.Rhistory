{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 + hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
setwd("~/Dropbox/github_repos/AlgaeFun/data/ostta/preprocessing")
ostta.genome.data <- read.fasta(file = "../genome/ostreococcus_tauri.fasta",seqtype = "DNA")
## Generate chromosome.info data frame
library(seqinr)
ostta.genome.data <- read.fasta(file = "../genome/ostreococcus_tauri.fasta",seqtype = "DNA")
chromosome.names <- getName(ostta.genome.data)
chromosome.names
chromosome.lengths <- sapply(X=getSequence(ostta.genome.data),FUN = length)
chromosome.lengths
chromosomes.info <- data.frame(chrom=chromosome.names,length=chromosome.lengths,is_circular=FALSE)
## Meta data info
meta.data.info <- data.frame(name=c("Resource URL","Genome"),value=c("https://genome.jgi.doe.gov/Ostta4221_3/Ostta4221_3.home.html","v3.0"))
ostta.txdb <- makeTxDbFromGFF(file = "ostreococcus_tauri.gtf",format = "gtf",dataSource = "JGI",organism = "Ostreococcus tauri",taxonomyId = 70448,chrominfo = chromosomes.info,metadata = meta.data.info)
## Generate TxDb package from gff3 file
library("GenomicFeatures")
ostta.txdb <- makeTxDbFromGFF(file = "ostreococcus_tauri.gtf",format = "gtf",dataSource = "JGI",organism = "Ostreococcus tauri",taxonomyId = 70448,chrominfo = chromosomes.info,metadata = meta.data.info)
ostta.txdb
genes(ostta.txdb)
makeTxDbPackage(txdb = ostta.txdb, version = "0.1", maintainer = "Francisco J. Romero-Campero <fran@us.es>", author = "Francisco J. Romero-Campero")
install.packages("./TxDb.Otauri.JGI/", repos=NULL)
## loading packages
#library(ChIPseeker)
library(TxDb.Otauri.JGI)
txdb <- TxDb.Otauri.JGI
genes(txdb)
setwd("~/Dropbox/github_repos/AlgaeFun/data/cre/preprocessing")
## Preprocess gff3 to generate gtf with gene_id and transcript_id
cre.gff3 <- read.table(file="../annotation/chlamydomonas_reinhardtii.gff3",header=F,quote = "#",as.is=T)
head(cre.gff3)
cre.gff3$V3
unique(cre.gff3$V3)
i <- 1
cre.gff3$V3[i]
cre.gff3$V9[i]
strsplit(cre.gff3$V9[i],split=";")
current.attributes <- strsplit(cre.gff3$V9[i],split=";")
current.attributes <- strsplit(cre.gff3$V9[i],split=";")
source('~/Dropbox/github_repos/AlgaeFun/data/cre/preprocessing/preprocessing_data_creinhardtii.R', echo=TRUE)
current.attributes <- strsplit(cre.gff3$V9[i],split=";")[[1]]
current.attributes
i <- 1
current.attributes <- strsplit(cre.gff3$V9[i],split=";")[[1]]
current.attributes
current.attributes[2]
strsplit(current.attributes[2],split="=")
strsplit(current.attributes[2],split="=")[[1]][2]
gene.name <- strsplit(current.attributes[2],split="=")[[1]][2]
gene.id <- strsplit(current.attributes[2],split="=")[[1]][2]
paste("gene_id", paste("\"",gene_id,"\""))
gene.id <- strsplit(current.attributes[2],split="=")[[1]][2]
paste("gene_id", paste("\"",gene.id,"\""))
cre.gtf <- cre.gff3
cre.gtf$V9[i] <- paste("gene_id", paste("\"",gene.id,"\""))
head(cre.gtf)
gene.id
cre.gtf$V9[i] <- paste("gene_id", paste("\"",gene.id,"\"",sep=""))
head(cre.gtf)
i <- 2
cre.gff3$V3[i]
cre.gff3$V9[i]
current.attributes
current.attributes <- strsplit(cre.gff3$V9[i],split=";")[[1]]
current.attributes
current.attributes[5]
strsplit(current.attributes[5],split="=")
strsplit(current.attributes[5],split="=")[[1]][2]
substr(strsplit(current.attributes[5],split="=")[[1]][2],start = 1,stop = 13)
current.attributes
current.attributes[2]
strsplit(current.attributes[2],"=")
strsplit(current.attributes[2],"=")[[1]][2]
paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep="")), collapse = " ")
transcript.id <- strsplit(current.attributes[2],"=")[[1]][2]
paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep="")), collapse = " ")
i <- 3
cre.gff3$V3[i]
current.attributes <- strsplit(cre.gff3$V9[i],split=";")[[1]]
current.attributes
gene.id <- substr(strsplit(current.attributes[1],split="=")[[1]][2],start = 1,stop = 13)
gene.id
trancript.id <- substr(strsplit(current.attributes[1],split="=")[[1]][2],start = 1,stop = 18)
trancript.id
strsplit(current.attributes[1],split="=")[[1]][2]
strsplit(strsplit(current.attributes[1],split="=")[[1]][2],split="exon.")
exon.namber <- strsplit(strsplit(current.attributes[1],split="=")[[1]][2],split="exon.")[[1]][2]
exon.number <- strsplit(strsplit(current.attributes[1],split="=")[[1]][2],split="exon.")[[1]][2]
exon.number
paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep=""),"exon_number",paste("\"",exon.number,"\";",sep="")), collapse = " ")
cre.gtf$V9[i] <- paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep=""),"exon_number",paste("\"",exon.number,"\";",sep="")), collapse = " ")
head(cre.gtf)
i <- 4
cre.gff3$V3[i]
current.attributes <- strsplit(cre.gff3$V9[i],split=";")[[1]]
current.attributes
current.attributes[2]
strsplit(current.attributes[2],split="=")
strsplit(current.attributes[2],split="=")[[1]][2]
substr(strsplit(current.attributes[2],split="=")[[1]][2],start = 1,stop = 13)
transcript.id <- substr(strsplit(current.attributes[2],split="=")[[1]][2],start = 1,stop = 18)
transcript.id
cre.gtf$V9[i] <- paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep="")), collapse = " ")
cre.gtf$V9[i]
i <- 5
cre.gff3$V3[i]
current.attributes <- strsplit(cre.gff3$V9[i],split=";")[[1]]
current.attributes
gene.id <- substr(strsplit(current.attributes[2],split="=")[[1]][2],start = 1,stop = 13)
transcript.id <- substr(strsplit(current.attributes[2],split="=")[[1]][2],start = 1,stop = 18)
gene.id
transcript.id
transcript.id <- substr(strsplit(current.attributes[2],split="=")[[1]][2],start = 1,stop = 18)
cre.gtf$V9[i] <- paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep="")), collapse = " ")
head(cre.gtf)
unique(cre.gff3$V3)
## Preprocess gff3 to generate gtf with gene_id and transcript_id
cre.gff3 <- read.table(file="../annotation/chlamydomonas_reinhardtii.gff3",header=F,quote = "#",as.is=T)
cre.gtf <- cre.gff3
for(i in 1:nrow(cre.gff3))
{
current.attributes <- strsplit(cre.gff3$V9[i],split=";")[[1]]
if(cre.gff3$V3[i] == "gene")
{
gene.id <- strsplit(current.attributes[2],split="=")[[1]][2]
cre.gtf$V9[i] <- paste("gene_id", paste("\"",gene.id,"\";",sep=""))
} else if(cre.gff3$V3[i] == "mRNA")
{
gene.id <- substr(strsplit(current.attributes[5],split="=")[[1]][2],start = 1,stop = 13)
transcript.id <- strsplit(current.attributes[2],"=")[[1]][2]
cre.gtf$V9[i] <- paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep="")), collapse = " ")
} else if(cre.gff3$V3[i] == "exon")
{
gene.id <- substr(strsplit(current.attributes[1],split="=")[[1]][2],start = 1,stop = 13)
trancript.id <- substr(strsplit(current.attributes[1],split="=")[[1]][2],start = 1,stop = 18)
exon.number <- strsplit(strsplit(current.attributes[1],split="=")[[1]][2],split="exon.")[[1]][2]
cre.gtf$V9[i] <- paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep=""),"exon_number",paste("\"",exon.number,"\";",sep="")), collapse = " ")
} else if(cre.gff3$V3[i] == "five_prime_UTR" || cre.gff3$V3[i] == "three_prime_UTR" || cre.gff3$V3[i] == "CDS")
{
gene.id <- substr(strsplit(current.attributes[2],split="=")[[1]][2],start = 1,stop = 13)
transcript.id <- substr(strsplit(current.attributes[2],split="=")[[1]][2],start = 1,stop = 18)
cre.gtf$V9[i] <- paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep="")), collapse = " ")
}
}
i
nrow(cre.gff3)
## Preprocess gff3 to generate gtf with gene_id and transcript_id
cre.gff3 <- read.table(file="../annotation/chlamydomonas_reinhardtii.gff3",header=F,quote = "#",as.is=T)
cre.gtf <- cre.gff3
head(cre.gff3)
head(cre.gtf)
unique(cre.gff3$V3)
for(i in 1:nrow(cre.gff3))
{
current.attributes <- strsplit(cre.gff3$V9[i],split=";")[[1]]
if(cre.gff3$V3[i] == "gene")
{
gene.id <- strsplit(current.attributes[2],split="=")[[1]][2]
cre.gtf$V9[i] <- paste("gene_id", paste("\"",gene.id,"\";",sep=""))
} else if(cre.gff3$V3[i] == "mRNA")
{
gene.id <- substr(strsplit(current.attributes[5],split="=")[[1]][2],start = 1,stop = 13)
transcript.id <- strsplit(current.attributes[2],"=")[[1]][2]
cre.gtf$V9[i] <- paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep="")), collapse = " ")
} else if(cre.gff3$V3[i] == "exon")
{
gene.id <- substr(strsplit(current.attributes[1],split="=")[[1]][2],start = 1,stop = 13)
trancript.id <- substr(strsplit(current.attributes[1],split="=")[[1]][2],start = 1,stop = 18)
exon.number <- strsplit(strsplit(current.attributes[1],split="=")[[1]][2],split="exon.")[[1]][2]
cre.gtf$V9[i] <- paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep=""),"exon_number",paste("\"",exon.number,"\";",sep="")), collapse = " ")
} else if(cre.gff3$V3[i] == "five_prime_UTR" || cre.gff3$V3[i] == "three_prime_UTR" || cre.gff3$V3[i] == "CDS")
{
gene.id <- substr(strsplit(current.attributes[2],split="=")[[1]][2],start = 1,stop = 13)
transcript.id <- substr(strsplit(current.attributes[2],split="=")[[1]][2],start = 1,stop = 18)
cre.gtf$V9[i] <- paste(c("gene_id",paste("\"",gene.id,"\";",sep=""),"transcript_id",paste("\"",transcript.id,"\";",sep="")), collapse = " ")
}
}
head(cre.gtf)
write.table(x = cre.gtf,file = "chlamydomonas_reinhardtii.gtf",sep = "\t",row.names = F,col.names = F,quote = F)
## Generate TxDb package from gff3 file
library("GenomicFeatures")
## Generate chromosome.info data frame
library(seqinr)
cre.genome.data <- read.fasta(file = "Creinhardtii_281_v5.0.fa",seqtype = "DNA")
cre.genome.data <- read.fasta(file = "../genome/chlamydomonas_reinhardtii.fa",seqtype = "DNA")
chromosome.names <- getName(cre.genome.data)
chromosome.lengths <- sapply(X=getSequence(cre.genome.data),FUN = length)
chromosomes.info <- data.frame(chrom=chromosome.names,length=chromosome.lengths,is_circular=FALSE)
## Meta data info
meta.data.info <- data.frame(name=c("Resource URL","Genome"),value=c("https://phytozome.jgi.doe.gov/","v5.0"))
cre.txdb <- makeTxDbFromGFF(file = "../annotation/chlamydomonas_reinhardtii.gtf",format = "gtf",dataSource = "Phytozome",organism = "Chlamydomonas reinhardtii",taxonomyId = 3055,chrominfo = chromosomes.info,metadata = meta.data.info)
cre.txdb
genes(cre.txdb)
cre.txdb
genes(cre.txdb)
cre.txdb <- makeTxDbFromGFF(file = "../annotation/chlamydomonas_reinhardtii.gtf",format = "gtf",dataSource = "Phytozome",organism = "Chlamydomonas reinhardtii",taxonomyId = 3055,chrominfo = chromosomes.info,metadata = meta.data.info)
cre.txdb
genes(cre.txdb)
## loading packages
#library(ChIPseeker)
library(TxDb.Otauri.JGI)
txdb <- TxDb.Otauri.JGI
genes(txdb)
chromosomes.info
meta.data.info
setwd("~/Dropbox/github_repos/AlgaeFun/data/cre/preprocessing")
cre.txdb <- makeTxDbFromGFF(file = "../annotation/chlamydomonas_reinhardtii.gtf",format = "gff3",dataSource = "Phytozome",organism = "Chlamydomonas reinhardtii",taxonomyId = 3055,chrominfo = chromosomes.info,metadata = meta.data.info)
cre.txdb <- makeTxDbFromGFF(file = "../annotation/chlamydomonas_reinhardtii.gtf",format = "gtf",dataSource = "Phytozome",organism = "Chlamydomonas reinhardtii",taxonomyId = 3055,chrominfo = chromosomes.info,metadata = meta.data.info)
cre.txdb
genes(cre.txdb)
cre.txdb <- makeTxDbFromGFF(file = "../annotation/chlamydomonas_reinhardtii.gff3",format = "gff3",dataSource = "Phytozome",organism = "Chlamydomonas reinhardtii",taxonomyId = 3055,chrominfo = chromosomes.info,metadata = meta.data.info)
cre.txdb
genes(cre.txdb)
