runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/ChlamyNET')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
gene.expression[zts.to.consider(zt.point = current.time.point) %in% seq(from=,to=24,by=4)]
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
library(igraph)
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
1+1
genotype.1 <- "resistant"
genotype.1
fecundity.1 <- 12.8
fecundity.1
FALSE
genotype.2 <- "resistant"
fecundity.2 <- 21.6
genotype.3 <- "control"
fecundity.3 <- 35.4
genotype.4 <- "control"
fecundity.4 <- 27.4
genotype.1
## Los tipos de datos simples en R son numérico, carácter y lógico.
is.numeric(genotype.1)
genotype.1
is.character(genotype.1)
res <- is.character(fecundity.1)   # El resultado de una función puede almacenarse en una variable
res
res
is.logical(res)
fecundity.1
fecundity.2
resistant.mean <- (fecundity.1 + fecundity.2) / 2
resistant.mean
fecundity.1
fecundity.3
fecundity.1 > fecundity.3
fecundity.2
fecundity.4
fecundity.2 <= fecundity.4
genotype.4
genotype.4 == "control"
fecundity.resistant <- c(12.8, 21.6, 14.8, 23.1, 34.6, 19.7, 22.6, 29.6, 16.4, 20.3, 29.3,
14.9, 27.3, 22.4, 27.5, 20.3, 38.7, 26.4, 23.7, 26.1, 29.5, 38.6,
44.4, 23.2, 23.6)
fecundity.resistant
1:25
25:1
1:25+1
1:2500+1
1:(25+1)
myvar <- 1:(25+1)
myvar
seq(from = 0,to = 20,by = 2)
seq(to = 20,by = 2,from = 0)
rep("resistant",25)
fecundity.susceptible <- c(38.4, 32.9, 48.5, 20.9, 11.6, 22.3, 30.2, 33.4, 26.7, 39, 12.8, 14.6, 12.2, 23.1,
29.4, 16, 20.1, 23.3, 22.9, 22.5, 15.1, 31, 16.9, 16.1, 10.8)
fecundity.control <- c(35.4, 27.4, 19.3, 41.8, 20.3, 37.6, 36.9)
fecundity.control
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
fecundity.control.names
names(fecundity.control) <- fecundity.control.names
fecundity.control
fecundity.control
fecundity.control[2]
fecundity.control[Mar]
fecundity.control["Mar"]
fecundity.control[["Mar"]]
fecundity.control[1:3]
fecundity.control[c(1,2,3)]
fecundity.control[c("Lun","Mar","Mie")]
fecundity.control[c("Lun","Mie","Mar")]
fecundity.control["Sab"]
fecundity.control["sab"]
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
names(fecundity.control) <- fecundity.control.names
fecundity.control
my.logical <-
fecundity.control > 30
fecundity.control > 30
my.logical <- fecundity.control > 30
fecundity.control[my.logical]
fecundity.control[fecundity.control < 20]
fecundity.control["Lun"]
fecundity.control["Lun"] <- 34.5
fecundity.control["Lun"]
fecundity.control
fecundity.control < 20
fecundity.control[fecundity.control < 20]
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
setwd("~/Dropbox/github_repos/AlgaeFun/data/vocar/preprocessing")
## DRAFT for KEGG
identity <- read.table(file = "result_identity.txt")
head(identity)
identity$V1
## DRAFT for KEGG
identity <- read.table(file = "result_identity.txt",as.is=T)
head(identity)
identity$V1
identity$V2
draft.data.frame <- data.frame(GID=identity$V1,
VOLCADRAFT=identity$V2,
stringsAsFactors = FALSE)
head(draft.data.frame)
## Documentation on how to generate org.db packages can be found on these links:
## http://bioconductor.org/packages/release/bioc/vignettes/AnnotationForge/inst/doc/MakingNewOrganismPackages.html
##
vocar.info <- read.table(file="Vcarteri_317_v2.1.annotation_info.txt",header=T,comment.char = "",sep = "\t",as.is=T, fill=T)
head(vocar.info)
nrow(vocar.info)
## Generate and write output data frame
id.vocar.name <- data.frame(GID=vocar.info$locusName,GENENAME=vocar.info$locusName,stringsAsFactors = FALSE)
head(id.vocar.name)
## Generate SYMBOL data frame
symbol.data.frame <- data.frame(GID=vocar.info$locusName,
SYMBOL=vocar.info$locusName,stringsAsFactors = FALSE)
head(symbol.data.frame)
nrow(symbol.data.frame)
symbol.data.frame[1:20,]
## Remove duplicated rows
symbol.data.frame <- symbol.data.frame[!duplicated(symbol.data.frame),]
nrow(symbol.data.frame)
sum(duplicated(symbol.data.frame))
head(symbol.data.frame)
gid <- vocar.info$locusName
go <- vocar.info$GO
evidence <- rep("ISS",length(gid))
go.data.frame <- data.frame(GID=gid,GO=go,EVIDENCE=evidence,stringsAsFactors = FALSE)
head(go.data.frame)
go.data.frame <- subset(go.data.frame, GO != "")
head(go.data.frame)
go.expanded.data.frame <- c()
for(i in 1:nrow(go.data.frame))
{
go.splitted <- strsplit(go.data.frame$GO[i],split=",")[[1]]
if(length(go.splitted) > 0)
{
for(j in 1:length(go.splitted))
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],go.splitted[j]))
}
} else
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],""))
}
}
head(go.expanded.data.frame)
go.data.frame <- data.frame(GID=go.expanded.data.frame[,1],
GO=go.expanded.data.frame[,2],
EVIDENCE=rep("ISS",nrow(go.expanded.data.frame)),stringsAsFactors = FALSE)
head(go.data.frame)
## Remove duplicated rows
go.data.frame <- go.data.frame[!duplicated(go.data.frame),]
go.data.frame[1:10,]
nrow(go.data.frame)
length(unique(go.data.frame$GID))
sum(duplicated(go.data.frame))
enzyme <- vocar.info$KEGG.ec
enzyme.data.frame <- data.frame(GID=gid,ENZYME=enzyme,stringsAsFactors = FALSE)
head(enzyme.data.frame)
## Remove duplicated rows
enzyme.data.frame <- enzyme.data.frame[!duplicated(enzyme.data.frame),]
head(enzyme.data.frame)
nrow(enzyme.data.frame)
duplicated(enzyme.data.frame)
sum(duplicated(enzyme.data.frame))
length(unique(enzyme.data.frame$GID))
head(enzyme.data.frame)
## Generate KOG data.frame
kog <- vocar.info$KOG
kog.data.frame <- data.frame(GID=gid,KOG=kog,stringsAsFactors = FALSE)
head(kog.data.frame)
## Remove duplicated rows
kog.data.frame <- kog.data.frame[!duplicated(kog.data.frame),]
sum(duplicated(kog.data.frame))
nrow(kog.data.frame)
head(kog.data.frame)
length(unique(kog.data.frame$GID))
##Generate KO data frame
ko <- vocar.info$KO
ko.data.frame <- data.frame(GID=gid, KO=ko, stringsAsFactors = F)
head(ko.data.frame)
ko.data.frame[1:20,]
ko.data.frame <- ko.data.frame[!duplicated(ko.data.frame),]
nrow(ko.data.frame)
sum(duplicated(ko.data.frame))
panther <- vocar.info$Panther
panther.data.frame <- data.frame(GID=gid, PANTHER=panther, stringsAsFactors = F)
nrow(panther.data.frame)
head(panther.data.frame)
panther.data.frame <- panther.data.frame[!duplicated(panther.data.frame),]
nrow(panther.data.frame)
sum(duplicated(panther.data.frame))
#     for(j in 1:length(panther.splitted))
#     {
#       panther.expanded.data.frame <- rbind(panther.expanded.data.frame,c(panther.data.frame[i,1],panther.splitted[j]))
#     }
#   } else
#   {
#     panther.expanded.data.frame <- rbind(panther.expanded.data.frame,c(panther.data.frame[i,1],""))
#   }
# }
# head (panther.expanded.data.frame)
panther.data.frame <- data.frame(GID=panther.data.frame[,1],
PANTHER=panther.data.frame[,2],
stringsAsFactors = FALSE)
head(panther.data.frame)
## DRAFT for KEGG
identity <- read.table(file = "result_identity.txt",as.is=T)
head(identity)
identity$V1
identity$V2
draft.data.frame <- data.frame(GID=identity$V1,
VOLCADRAFT=identity$V2,
stringsAsFactors = FALSE)
head(draft.data.frame)
library(AnnotationForge)
library(GO.db)
makeOrgPackage(go=go.data.frame,
SYMBOL=symbol.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
KO=ko.data.frame,
PANTHER=panther.data.frame,
VOLCADRAFT= draft.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero <fran@us.es>",
author = "Ana B. Romero-Losada",
outputDir = ".",
tax_id = "3067",
genus = "Volvox",
species = "carteri",
goTable = "go",
verbose = TRUE)
draft.data.frame <- draft.data.frame[!duplicated(draft.data.frame),]
head(draft.data.frame)
makeOrgPackage(go=go.data.frame,
SYMBOL=symbol.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
KO=ko.data.frame,
PANTHER=panther.data.frame,
VOLCADRAFT= draft.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero <fran@us.es>",
author = "Ana B. Romero-Losada",
outputDir = ".",
tax_id = "3067",
genus = "Volvox",
species = "carteri",
goTable = "go",
verbose = TRUE)
makeOrgPackage(go=go.data.frame,
SYMBOL=symbol.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
KO=ko.data.frame,
PANTHER=panther.data.frame,
VOLCADRAFT= draft.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero <fran@us.es>",
author = "Ana B. Romero-Losada",
outputDir = ".",
tax_id = "3067",
genus = "Volvox",
species = "carteri",
goTable = "go",
verbose = TRUE)
install.packages("./org.Vcarteri.eg.db/", repos=NULL)
library(org.Vcarteri.eg.db)
columns(org.Vcarteri.eg.db)
setwd("~/Dropbox/github_repos/AlgaeFun/web_app")
library(clusterProfiler)
library(pathview)
library(org.Vcarteri.eg.db)
microalgae.names <- c("Ostreococcus tauri", "Chlamydomonas reinhardtii", "Dunaliella salina","Volvox carteri")
names(microalgae.names) <- c("otauri", "creinhardtii", "dsalina", "vcarteri")
# target.genes <- read.table(file="cre/examples/activated_genes.txt",as.is=T)[[1]]
#
target.genes <- read.table(file="example_files/example_vcarteri.txt",as.is=T)[[1]]
target.genes
vocar.volcadraft.map <- select(org.Vcarteri.eg.db,columns = c("VOLCADRAFT"),keys=keys(org.Vcarteri.eg.db,keytype = "GID"))
vocar.volcadraft.map
volcadraft.ids <- vocar.volcadraft.map$VOLCADRAFT
names(volcadraft.ids) <- vocar.ids
names(volcadraft.ids) <- vocar.ids
vocar.ids <- vocar.volcadraft.map$GID
volcadraft.ids <- vocar.volcadraft.map$VOLCADRAFT
names(volcadraft.ids) <- vocar.ids
names(vocar.ids) <- volcadraft.ids
target.genes <- volcadraft.ids[target.genes]
target.genes
shiny::runApp()
runApp()
runApp()
vocar.volcadraft.map <- select(org.Vcarteri.eg.db,columns = c("VOLCADRAFT"),keys=keys(org.Vcarteri.eg.db,keytype = "GID"))
vocar.ids <- vocar.volcadraft.map$GID
volcadraft.ids <- vocar.volcadraft.map$VOLCADRAFT
names(volcadraft.ids) <- vocar.ids
names(vocar.ids) <- volcadraft.ids
target.genes <- volcadraft.ids[target.genes]
names(target.genes) <- NULL
gene.universe <- volcadraft.ids[gene.universe]
names(gene.universe) <- NULL
organism.id <- "vcn"
org.db <- org.Vcarteri.eg.db
microalgae.genes <- read.table(file = "universe/vocar_universe.txt",as.is = T)[[1]]
gene.universe <- unique(select(org.db,columns = c("GO"),keys=keys(org.db,keytype = "GID"))[["GID"]])
universe.text <- " default universe."
organism.id <- "vcn"
## Compute KEGG pathway enrichment
pathway.enrichment <- enrichKEGG(gene = target.genes, organism = organism.id, keyType = "kegg",
universe = gene.universe,qvalueCutoff = input$pvalue)
vocar.volcadraft.map <- select(org.Vcarteri.eg.db,columns = c("VOLCADRAFT"),keys=keys(org.Vcarteri.eg.db,keytype = "GID"))
vocar.ids <- vocar.volcadraft.map$GID
volcadraft.ids <- vocar.volcadraft.map$VOLCADRAFT
names(volcadraft.ids) <- vocar.ids
names(vocar.ids) <- volcadraft.ids
target.genes <- volcadraft.ids[target.genes]
names(target.genes) <- NULL
gene.universe <- volcadraft.ids[gene.universe]
names(gene.universe) <- NULL
organism.id <- "vcn"
target.genes
volcadraft.ids
target.genes
target.genes <- read.table(file="example_files/example_vcarteri.txt",as.is=T)[[1]]
target.genes
volcadraft.ids[target.genes]
target.genes <- volcadraft.ids[target.genes]
names(target.genes) <- NULL
target.genes
volcadraft.ids[gene.universe]
gene.universe
organism.id <- "vcn"
## Compute KEGG pathway enrichment
pathway.enrichment <- enrichKEGG(gene = target.genes, organism = organism.id, keyType = "kegg",
universe = gene.universe,qvalueCutoff = input$pvalue)
pathway.enrichment <- enrichKEGG(gene = target.genes, organism = organism.id, keyType = "kegg",
universe = gene.universe,qvalueCutoff = 0.05)
pathway.enrichment.result <- as.data.frame(pathway.enrichment)
pat
pathway.enrichment.result
