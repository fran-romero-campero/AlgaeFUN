runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/ChlamyNET')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
gene.expression[zts.to.consider(zt.point = current.time.point) %in% seq(from=,to=24,by=4)]
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
library(igraph)
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
1+1
genotype.1 <- "resistant"
genotype.1
fecundity.1 <- 12.8
fecundity.1
FALSE
genotype.2 <- "resistant"
fecundity.2 <- 21.6
genotype.3 <- "control"
fecundity.3 <- 35.4
genotype.4 <- "control"
fecundity.4 <- 27.4
genotype.1
## Los tipos de datos simples en R son numérico, carácter y lógico.
is.numeric(genotype.1)
genotype.1
is.character(genotype.1)
res <- is.character(fecundity.1)   # El resultado de una función puede almacenarse en una variable
res
res
is.logical(res)
fecundity.1
fecundity.2
resistant.mean <- (fecundity.1 + fecundity.2) / 2
resistant.mean
fecundity.1
fecundity.3
fecundity.1 > fecundity.3
fecundity.2
fecundity.4
fecundity.2 <= fecundity.4
genotype.4
genotype.4 == "control"
fecundity.resistant <- c(12.8, 21.6, 14.8, 23.1, 34.6, 19.7, 22.6, 29.6, 16.4, 20.3, 29.3,
14.9, 27.3, 22.4, 27.5, 20.3, 38.7, 26.4, 23.7, 26.1, 29.5, 38.6,
44.4, 23.2, 23.6)
fecundity.resistant
1:25
25:1
1:25+1
1:2500+1
1:(25+1)
myvar <- 1:(25+1)
myvar
seq(from = 0,to = 20,by = 2)
seq(to = 20,by = 2,from = 0)
rep("resistant",25)
fecundity.susceptible <- c(38.4, 32.9, 48.5, 20.9, 11.6, 22.3, 30.2, 33.4, 26.7, 39, 12.8, 14.6, 12.2, 23.1,
29.4, 16, 20.1, 23.3, 22.9, 22.5, 15.1, 31, 16.9, 16.1, 10.8)
fecundity.control <- c(35.4, 27.4, 19.3, 41.8, 20.3, 37.6, 36.9)
fecundity.control
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
fecundity.control.names
names(fecundity.control) <- fecundity.control.names
fecundity.control
fecundity.control
fecundity.control[2]
fecundity.control[Mar]
fecundity.control["Mar"]
fecundity.control[["Mar"]]
fecundity.control[1:3]
fecundity.control[c(1,2,3)]
fecundity.control[c("Lun","Mar","Mie")]
fecundity.control[c("Lun","Mie","Mar")]
fecundity.control["Sab"]
fecundity.control["sab"]
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
names(fecundity.control) <- fecundity.control.names
fecundity.control
my.logical <-
fecundity.control > 30
fecundity.control > 30
my.logical <- fecundity.control > 30
fecundity.control[my.logical]
fecundity.control[fecundity.control < 20]
fecundity.control["Lun"]
fecundity.control["Lun"] <- 34.5
fecundity.control["Lun"]
fecundity.control
fecundity.control < 20
fecundity.control[fecundity.control < 20]
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
working.directory <- "/home/fran/tmp/ngaditana/samples/"
control.condition <- "high_N"
experimental.condition <- "low_N"
fc.threshold <- 2
q.val.threshold <- 0.05
setwd(working.directory)
## Load libraries
library(ballgown)
library(genefilter)
library(FactoMineR)
library("factoextra")
# Load experimental design
experimental.design <- read.csv("experimental_design.csv",as.is=T)
experimental.design
## Sort samples
sorted.samples <- sort(experimental.design$sample,ind=T)
indeces.sorted.samples <- sorted.samples$ix
experimental.design <- experimental.design[indeces.sorted.samples,]
number.samples <- nrow(experimental.design)
number.replicates <- table(experimental.design$condition)
control.replicates <- number.replicates[[control.condition]]
experimental.replicates <- number.replicates[[experimental.condition]]
sample.labels <- vector(mode="character",length = nrow(experimental.design))
control.indeces <- vector(mode="numeric",length=control.replicates)
experimental.indeces <- vector(mode="numeric",length=control.replicates)
j <- 1
k <- 1
for(i in 1:nrow(experimental.design))
{
if(experimental.design$condition[i] == control.condition)
{
sample.labels[i] <- paste(control.condition,j,sep="_")
control.indeces[j] <- i
j <- j + 1
} else if (experimental.design$condition[i] == experimental.condition)
{
sample.labels[i] <- paste(experimental.condition,k,sep="_")
experimental.indeces[k] <- i
k <- k + 1
}
}
## Load results from hisat2 + stringtie
bg.data <- ballgown(dataDir = ".", samplePattern = "sample", pData=experimental.design)
## Load results from hisat2 + stringtie
bg.data <- ballgown(dataDir = ".", samplePattern = "sample", pData=experimental.design)
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
library(clusterProfiler)
library(pathview)
## Load microalgae annotation packages
library(org.Otauri.eg.db)
library(org.Creinhardtii.eg.db)
library(org.Dsalina.eg.db)
library(org.Vcarteri.eg.db)
library(org.Ptricornutum.eg.db)
library(org.Ngaditana.eg.db)
microalgae.names <- c("Ostreococcus tauri", "Chlamydomonas reinhardtii", "Dunaliella salina","Volvox carteri","Phaeodactylum tricornutum","Nannochloropsis gaditana")
names(microalgae.names) <- c("otauri", "creinhardtii", "dsalina", "vcarteri","ptricornutum", "ngaditana")
## Auxiliary functions
## Auxiliary function to compute enrichments
compute.enrichments <- function(gene.ratios, bg.ratios)
{
gene.ratios.eval <- sapply(parse(text=gene.ratios),FUN = eval)
bg.ratios.eval <- sapply(parse(text=bg.ratios),FUN = eval)
enrichments <- round(x=gene.ratios.eval/bg.ratios.eval,digits = 2)
enrichments.text <- paste(enrichments, " (", gene.ratios, "; ", bg.ratios, ")",sep="")
return(enrichments.text)
}
## Ostreococcus tauri gene link to ORCAE
## https://bioinformatics.psb.ugent.be/orcae/annotation/OsttaV2/current/ostta15g02520
ostta.gene.link <- function(gene.name)
{
orcae.link <- paste0("https://bioinformatics.psb.ugent.be/orcae/annotation/OsttaV2/current/",gene.name)
gene.link <- paste(c("<a href=\"",
orcae.link,
"\" target=\"_blank\">",
gene.name, "</a>"),
collapse="")
return(gene.link)
}
## Gene link to Phytozome
## https://phytozome.jgi.doe.gov/pz/portal.html#!results?search=0&crown=1&star=1&method=0&searchText=Cre13.g569850&offset=0
phytozome.gene.link <- function(gene.name)
{
phytozome.link <- paste(c("https://phytozome.jgi.doe.gov/pz/portal.html#!results?search=0&crown=1&star=1&method=0&searchText=",
gene.name,
"&offset=0"),collapse="")
gene.link <- paste(c("<a href=\"",
phytozome.link,
"\" target=\"_blank\">",
gene.name, "</a>"),
collapse="")
return(gene.link)
}
## Phaeodactylum tricornutum link to ENSEMBL PROTISTS
## https://protists.ensembl.org/Phaeodactylum_tricornutum/Gene/Summary?g=Phatr3_EG00535
phaeodactylum.gene.link <- function(gene.name)
{
phatri.link <- paste(c("https://protists.ensembl.org/Phaeodactylum_tricornutum/Gene/Summary?g=",
gene.name),collapse="")
gene.link <- paste(c("<a href=\"",
phatri.link,
"\" target=\"_blank\">",
gene.name, "</a>"),
collapse="")
return(gene.link)
}
## Nannochloropsis gaditana link to CRIBI Genomics
#http://www.nannochloropsis.org/gene/Naga_100001g4
ngaditana.gene.link <- function(gene.name)
{
naga.link <- paste(c("http://www.nannochloropsis.org/gene/",
gene.name),collapse="")
gene.link <- paste(c("<a href=\"",
naga.link,
"\" target=\"_blank\">",
gene.name, "</a>"),
collapse="")
return(gene.link)
}
## Gene Ontology term link
# http://amigo.geneontology.org/amigo/term/GO:0015979
go.link <- function(go.term)
{
link <- paste0("http://amigo.geneontology.org/amigo/term/", go.term)
complete.link <- paste(c("<a href=\"",
link,
"\" target=\"_blank\">",
go.term, "</a>"),
collapse = "")
return(complete.link)
}
## KEGG pathway link
## https://www.genome.jp/kegg-bin/show_pathway?cre04136
kegg.pathway.link <- function(kegg.pathway)
{
link <- paste0("https://www.genome.jp/kegg-bin/show_pathway?",kegg.pathway)
complete.link <- paste(c("<a href=\"",
link,
"\" target=\"_blank\">",
kegg.pathway, "</a>"),
collapse = "")
return(complete.link)
}
## KEGG module link
## https://www.genome.jp/kegg-bin/show_module?cre04136
kegg.module.link <- function(kegg.module)
{
link <- paste0("https://www.genome.jp/kegg-bin/show_module?",kegg.module)
complete.link <- paste(c("<a href=\"",
link,
"\" target=\"_blank\">",
kegg.module, "</a>"),
collapse = "")
return(complete.link)
}
target.genes <- read.table(file="example_files/example_ngaditana_1.txt", as.is=T)[[1]]
setwd("~/Dropbox/github_repos/AlgaeFun/web_app")
target.genes <- read.table(file="example_files/example_ngaditana_1.txt", as.is=T)[[1]]
input <- list(microalgae = "ngaditana", pvalue = 0.05, analysis = "kegg", input_mode = "No")
org.db <- org.Ngaditana.eg.db
microalgae.genes <- read.table(file = "universe/naga_universe.txt",as.is = T)[[1]]
naga.draft.map <- select(org.Ngaditana.eg.db,columns = c("NAGADRAFT"),keys=keys(org.Ngaditana.eg.db,keytype = "GID"))
naga.ids <- naga.draft.map$GID
nagadraft.ids <- naga.draft.map$NAGADRAFT
names(nagadraft.ids) <- naga.ids
names(naga.ids) <- nagadraft.ids
target.genes <- nagadraft.ids[target.genes]
names(target.genes) <- NULL
gene.universe <- nagadraft.ids[gene.universe]
names(gene.universe) <- NULL
organism.id <- "ngd"
## Compute KEGG pathway enrichment
pathway.enrichment <- enrichKEGG(gene = target.genes, organism = organism.id, keyType = "kegg",
universe = gene.universe,qvalueCutoff = input$pvalue)
org.db <- org.Ngaditana.eg.db
microalgae.genes <- read.table(file = "universe/naga_universe.txt",as.is = T)[[1]]
gene.universe <- unique(select(org.db,columns = c("GO"),keys=keys(org.db,keytype = "GID"))[["GID"]])
universe.text <- " default universe."
naga.draft.map <- select(org.Ngaditana.eg.db,columns = c("NAGADRAFT"),keys=keys(org.Ngaditana.eg.db,keytype = "GID"))
naga.ids <- naga.draft.map$GID
nagadraft.ids <- naga.draft.map$NAGADRAFT
names(nagadraft.ids) <- naga.ids
names(naga.ids) <- nagadraft.ids
target.genes <- nagadraft.ids[target.genes]
names(target.genes) <- NULL
gene.universe <- nagadraft.ids[gene.universe]
names(gene.universe) <- NULL
organism.id <- "ngd"
## Compute KEGG pathway enrichment
pathway.enrichment <- enrichKEGG(gene = target.genes, organism = organism.id, keyType = "kegg",
universe = gene.universe,qvalueCutoff = input$pvalue)
target.genes
target.genes <- read.table(file="example_files/example_ngaditana_1.txt", as.is=T)[[1]]
naga.draft.map <- select(org.Ngaditana.eg.db,columns = c("NAGADRAFT"),keys=keys(org.Ngaditana.eg.db,keytype = "GID"))
naga.ids <- naga.draft.map$GID
nagadraft.ids <- naga.draft.map$NAGADRAFT
names(nagadraft.ids) <- naga.ids
names(naga.ids) <- nagadraft.ids
target.genes <- nagadraft.ids[target.genes]
names(target.genes) <- NULL
gene.universe <- nagadraft.ids[gene.universe]
names(gene.universe) <- NULL
organism.id <- "ngd"
target.genes
gene.universe
gene.universe <- unique(select(org.db,columns = c("GO"),keys=keys(org.db,keytype = "GID"))[["GID"]])
universe.text <- " default universe."
gene.universe <- nagadraft.ids[gene.universe]
names(gene.universe) <- NULL
## Compute KEGG pathway enrichment
pathway.enrichment <- enrichKEGG(gene = target.genes, organism = organism.id, keyType = "kegg",
universe = gene.universe,qvalueCutoff = input$pvalue)
pathway.enrichment.result <- as.data.frame(pathway.enrichment)
nrow(pathway.enrichment.result) > 0
pathway.enrichment.result
modules.enrichment <- enrichMKEGG(gene = target.genes, organism = organism.id, keyType = "kegg")
modules.enrichment <- enrichMKEGG(gene = target.genes, organism = organism.id, keyType = "kegg",universe = gene.universe)
gene.universe
organism.id
modules.enrichment <- enrichMKEGG(gene = target.genes, universe = gene.universe, organism = organism.id, keyType = "kegg")
organismMapper(organism.id)
enrichMKEGG
modules.enrichment <- enrichMKEGG(gene = target.genes, universe = gene.universe, organism = organism.id, keyType = "kegg",minGSSize = 1)
modules.enrichment
modules.enrichment <- enrichMKEGG(gene = target.genes, universe = gene.universe, organism = organism.id, keyType = "kegg",minGSSize = 5)
modules.enrichment <- enrichMKEGG(gene = target.genes, universe = gene.universe, organism = organism.id, keyType = "kegg",minGSSize = 2)
modules.enrichment <- enrichMKEGG(gene = target.genes, universe = gene.universe, organism = organism.id, keyType = "kegg",minGSSize = 3)
modules.enrichment <- enrichMKEGG(gene = target.genes, universe = gene.universe, organism = organism.id, keyType = "kegg",minGSSize = 4)
