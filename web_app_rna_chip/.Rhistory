runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
library(igraph)
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
1+1
genotype.1 <- "resistant"
genotype.1
fecundity.1 <- 12.8
fecundity.1
FALSE
genotype.2 <- "resistant"
fecundity.2 <- 21.6
genotype.3 <- "control"
fecundity.3 <- 35.4
genotype.4 <- "control"
fecundity.4 <- 27.4
genotype.1
## Los tipos de datos simples en R son numérico, carácter y lógico.
is.numeric(genotype.1)
genotype.1
is.character(genotype.1)
res <- is.character(fecundity.1)   # El resultado de una función puede almacenarse en una variable
res
res
is.logical(res)
fecundity.1
fecundity.2
resistant.mean <- (fecundity.1 + fecundity.2) / 2
resistant.mean
fecundity.1
fecundity.3
fecundity.1 > fecundity.3
fecundity.2
fecundity.4
fecundity.2 <= fecundity.4
genotype.4
genotype.4 == "control"
fecundity.resistant <- c(12.8, 21.6, 14.8, 23.1, 34.6, 19.7, 22.6, 29.6, 16.4, 20.3, 29.3,
14.9, 27.3, 22.4, 27.5, 20.3, 38.7, 26.4, 23.7, 26.1, 29.5, 38.6,
44.4, 23.2, 23.6)
fecundity.resistant
1:25
25:1
1:25+1
1:2500+1
1:(25+1)
myvar <- 1:(25+1)
myvar
seq(from = 0,to = 20,by = 2)
seq(to = 20,by = 2,from = 0)
rep("resistant",25)
fecundity.susceptible <- c(38.4, 32.9, 48.5, 20.9, 11.6, 22.3, 30.2, 33.4, 26.7, 39, 12.8, 14.6, 12.2, 23.1,
29.4, 16, 20.1, 23.3, 22.9, 22.5, 15.1, 31, 16.9, 16.1, 10.8)
fecundity.control <- c(35.4, 27.4, 19.3, 41.8, 20.3, 37.6, 36.9)
fecundity.control
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
fecundity.control.names
names(fecundity.control) <- fecundity.control.names
fecundity.control
fecundity.control
fecundity.control[2]
fecundity.control[Mar]
fecundity.control["Mar"]
fecundity.control[["Mar"]]
fecundity.control[1:3]
fecundity.control[c(1,2,3)]
fecundity.control[c("Lun","Mar","Mie")]
fecundity.control[c("Lun","Mie","Mar")]
fecundity.control["Sab"]
fecundity.control["sab"]
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
names(fecundity.control) <- fecundity.control.names
fecundity.control
my.logical <-
fecundity.control > 30
fecundity.control > 30
my.logical <- fecundity.control > 30
fecundity.control[my.logical]
fecundity.control[fecundity.control < 20]
fecundity.control["Lun"]
fecundity.control["Lun"] <- 34.5
fecundity.control["Lun"]
fecundity.control
fecundity.control < 20
fecundity.control[fecundity.control < 20]
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
working.directory <- "/home/fran/tmp/ngaditana/samples/"
control.condition <- "high_N"
experimental.condition <- "low_N"
fc.threshold <- 2
q.val.threshold <- 0.05
setwd(working.directory)
## Load libraries
library(ballgown)
library(genefilter)
library(FactoMineR)
library("factoextra")
# Load experimental design
experimental.design <- read.csv("experimental_design.csv",as.is=T)
experimental.design
## Sort samples
sorted.samples <- sort(experimental.design$sample,ind=T)
indeces.sorted.samples <- sorted.samples$ix
experimental.design <- experimental.design[indeces.sorted.samples,]
number.samples <- nrow(experimental.design)
number.replicates <- table(experimental.design$condition)
control.replicates <- number.replicates[[control.condition]]
experimental.replicates <- number.replicates[[experimental.condition]]
sample.labels <- vector(mode="character",length = nrow(experimental.design))
control.indeces <- vector(mode="numeric",length=control.replicates)
experimental.indeces <- vector(mode="numeric",length=control.replicates)
j <- 1
k <- 1
for(i in 1:nrow(experimental.design))
{
if(experimental.design$condition[i] == control.condition)
{
sample.labels[i] <- paste(control.condition,j,sep="_")
control.indeces[j] <- i
j <- j + 1
} else if (experimental.design$condition[i] == experimental.condition)
{
sample.labels[i] <- paste(experimental.condition,k,sep="_")
experimental.indeces[k] <- i
k <- k + 1
}
}
## Load results from hisat2 + stringtie
bg.data <- ballgown(dataDir = ".", samplePattern = "sample", pData=experimental.design)
## Load results from hisat2 + stringtie
bg.data <- ballgown(dataDir = ".", samplePattern = "sample", pData=experimental.design)
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
runApp('Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
setwd("~/Nextcloud/Polycomb/brahma_fran")
no.marks.up.1 <- read.table(file="no_marks_up_1.txt",header = F,as.is=T)
nrow(no.marks.up.1)
#no.marks.up.0.1 <- read.table(file="no_marks_0_1.txt",header = F,as.is=T)
#nrow(no.marks.up.0.1)
only.h2 <- read.table(file="only_h2_0_1.txt",header=F,as.is=T)
nrow(only.h2)
only.k27 <- read.table(file="only_k27_0_1.txt",header=F,as.is=T)
nrow(only.k27)
h2.k27 <- read.table(file="h2_k27_0_1.txt",header=F,as.is=T)
nrow(h2.k27)
## Plotting the results around TSS (you may have to change the names of the conditions)
plot(colMeans(no.marks.up.1,na.rm = TRUE),type="l",
col="blue",lwd=3,ylab="",cex.lab=2,axes=FALSE,xlab="",
main="",ylim=c(90,190))
#lines(colMeans(no.marks.up.0.1,na.rm=T),lwd=3,col="grey")
lines(colMeans(only.h2,na.rm=T),lwd=3,col="orange")
lines(colMeans(only.k27,na.rm=T),lwd=3,col="purple")
lines(colMeans(h2.k27,na.rm=T),lwd=3,col="green")
## Activados
lines(x=c(750,750),y=c(1000,-1000),lwd=2,col="red",lty=2)
lines(x=c(950,950),y=c(1000,-1000),lwd=2,col="red",lty=2)
lines(x=c(1100,1100),y=c(1000,-1000),lwd=2,col="red",lty=2)
lines(x=c(1250,1250),y=c(1000,-1000),lwd=2,col="red",lty=2)
lines(x=c(1400,1400),y=c(1000,-1000),lwd=2,col="red",lty=2)
##Only h2
lines(x=c(700,700),y=c(1000,-1000),lwd=2,col="red",lty=2)
lines(x=c(930,930),y=c(1000,-1000),lwd=2,col="red",lty=2)
lines(x=c(1080,1080),y=c(1000,-1000),lwd=2,col="red",lty=2)
lines(x=c(1260,1260),y=c(1000,-1000),lwd=2,col="red",lty=2)
lines(x=c(1440,1440),y=c(1000,-1000),lwd=2,col="red",lty=2)
normalize.vector <- function(my.vector)
{
return(my.vector/max(my.vector,na.rm = T))
}
normalized.no.marks.up.1.nuc.1 <- t(apply(X = no.marks.up.1[,700:950],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.2 <- t(apply(X = no.marks.up.1[,950:1100],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.3 <- t(apply(X = no.marks.up.1[,1100:1250],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.4 <- t(apply(X = no.marks.up.1[,1250:1400],MARGIN = 1,FUN = normalize.vector))
## Merge profiles
merged.profiles.no.marks.up.1 <- c()
nuc.width.1.no.marks.up.1 <- c()
central.1.no.marks.up.1 <- c()
i <- 1
## N 1
step.size <- 50
top <- 4
while(step.size*i < nrow(no.marks.up.1))
{
current.profile.1 <- colMeans(normalized.no.marks.up.1.nuc.1[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.1)
upper.bound <- max(current.profile.1)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.1 <- current.profile.1 > horizontal.line
current.pos.1 <- which(current.profile.1)
current.width.1 <- current.pos.1[length(current.pos.1)]-current.pos.1[1]
nuc.width.1.no.marks.up.1 <- c(nuc.width.1.no.marks.up.1,
current.width.1)
central.1.no.marks.up.1 <- c(central.1.no.marks.up.1,
current.pos.1[1]+floor(current.width.1/2))
## N 2
current.profile.2 <- colMeans(normalized.no.marks.up.1.nuc.2[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.2)
upper.bound <- max(current.profile.2)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.2 <- current.profile.2 > horizontal.line
## N 3
current.profile.3 <- colMeans(normalized.no.marks.up.1.nuc.3[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.3)
upper.bound <- max(current.profile.3)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.3 <- current.profile.3 > horizontal.line
##N 4
current.profile.4 <- colMeans(normalized.no.marks.up.1.nuc.4[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.4)
upper.bound <- max(current.profile.4)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.4 <- current.profile.4 > horizontal.line
#  plot(c(current.profile.1,current.profile.2,current.profile.3,current.profile.4),type="l",lwd=2,col="blue",xlab="",ylab="")
merged.profiles.no.marks.up.1 <- rbind(merged.profiles.no.marks.up.1,
c(current.profile.1,current.profile.2,current.profile.3,current.profile.4))
i <- i + 1
}
plot(colMeans(merged.profiles.no.marks.up.1),type="l")
library(dichromat)
colfunc <- colorRampPalette(c("lightblue", "firebrick1"))
colfunc <- colorRampPalette(c("white", "blue"))
heatmap(x = merged.profiles.no.marks.up.1*1,Rowv=NA,Colv = NA,labRow = "",labCol="",keep.dendro = F,col=colfunc(10)[c(3:6)])
sig.data <- read.table(file="only_h2_0_1.txt",header=F,as.is=T)
normalized.no.marks.up.1.nuc.1 <- t(apply(X = sig.data[,700:930],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.2 <- t(apply(X = sig.data[,930:1080],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.3 <- t(apply(X = sig.data[,1080:1260],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.4 <- t(apply(X = sig.data[,1260:1440],MARGIN = 1,FUN = normalize.vector))
## Merge profiles
merged.profiles.only.h2 <- c()
central.1.h2 <- c()
nuc.width.1.h2 <- c()
i <- 1
## N 1
step.size <- 50
top <- 4
while(step.size*i < nrow(sig.data))
{
current.profile.1 <- colMeans(normalized.no.marks.up.1.nuc.1[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.1)
upper.bound <- max(current.profile.1)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.1 <- current.profile.1 > horizontal.line
#plot(current.profile.1,type="l")
#length(current.profile.1)
current.pos.1 <- which(current.profile.1)
current.width.1 <- current.pos.1[length(current.pos.1)]-current.pos.1[1]
nuc.width.1.h2 <- c(nuc.width.1.h2,
current.width.1)
central.1.h2 <- c(central.1.h2,
current.pos.1[1]+floor(current.width.1/2))
## N 2
current.profile.2 <- colMeans(normalized.no.marks.up.1.nuc.2[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.2)
upper.bound <- max(current.profile.2)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.2 <- current.profile.2 > horizontal.line
## N 3
current.profile.3 <- colMeans(normalized.no.marks.up.1.nuc.3[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.3)
upper.bound <- max(current.profile.3)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.3 <- current.profile.3 > horizontal.line
##N 4
current.profile.4 <- colMeans(normalized.no.marks.up.1.nuc.4[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.4)
upper.bound <- max(current.profile.4)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.4 <- current.profile.4 > horizontal.line
#plot(c(current.profile.1,current.profile.2,current.profile.3,current.profile.4),type="l",lwd=2,col="blue",xlab="",ylab="")
merged.profiles.only.h2 <- rbind(merged.profiles.only.h2,
c(current.profile.1,current.profile.2,current.profile.3,current.profile.4))
i <- i + 1
}
central.1.h2
boxplot(nuc.width.1.no.marks.up.1,nuc.width.1.h2)
boxplot(central.1.no.marks.up.1,central.1.h2)
sd(central.1.no.marks.up.1)
sd(central.1.h2)
plot(colMeans(merged.profiles.only.h2),type="l")
colfunc <- colorRampPalette(c("white", "orange"))
heatmap(x = merged.profiles.only.h2*1,Rowv=NA,Colv = NA,labRow = "",labCol="",keep.dendro = F,col=colfunc(10)[c(3:9)])
sig.data <- read.table(file="h2_k27_0_1.txt",header=F,as.is=T)
normalized.no.marks.up.1.nuc.1 <- t(apply(X = sig.data[,700:930],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.2 <- t(apply(X = sig.data[,930:1080],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.3 <- t(apply(X = sig.data[,1080:1260],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.4 <- t(apply(X = sig.data[,1260:1440],MARGIN = 1,FUN = normalize.vector))
## Merge profiles
merged.profiles.h2.k27 <- c()
central.1.h2.k27 <- c()
nuc.width.1.h2.k27 <- c()
i <- 1
## N 1
step.size <- 50
top <- 4
while(step.size*i < nrow(sig.data))
{
current.profile.1 <- colMeans(normalized.no.marks.up.1.nuc.1[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.1)
upper.bound <- max(current.profile.1)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.1 <- current.profile.1 > horizontal.line
current.pos.1 <- which(current.profile.1)
current.width.1 <- current.pos.1[length(current.pos.1)]-current.pos.1[1]
nuc.width.1.h2.k27 <- c(nuc.width.1.h2.k27,
current.width.1)
central.1.h2.k27 <- c(central.1.h2.k27,
current.pos.1[1]+floor(current.width.1/2))
## N 2
current.profile.2 <- colMeans(normalized.no.marks.up.1.nuc.2[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.2)
upper.bound <- max(current.profile.2)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.2 <- current.profile.2 > horizontal.line
## N 3
current.profile.3 <- colMeans(normalized.no.marks.up.1.nuc.3[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.3)
upper.bound <- max(current.profile.3)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.3 <- current.profile.3 > horizontal.line
##N 4
current.profile.4 <- colMeans(normalized.no.marks.up.1.nuc.4[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.4)
upper.bound <- max(current.profile.4)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.4 <- current.profile.4 > horizontal.line
#plot(c(current.profile.1,current.profile.2,current.profile.3,current.profile.4),type="l",lwd=2,col="blue",xlab="",ylab="")
merged.profiles.h2.k27 <- rbind(merged.profiles.h2.k27,
c(current.profile.1,current.profile.2,current.profile.3,current.profile.4))
i <- i + 1
}
plot(colMeans(merged.profiles.h2.k27),type="l")
boxplot(nuc.width.1.no.marks.up.1,nuc.width.1.h2,nuc.width.1.h2.k27)
boxplot(central.1.no.marks.up.1,central.1.h2,central.1.h2.k27)
sd(central.1.no.marks.up.1)
sd(central.1.h2)
sd(central.1.h2.k27)
colfunc <- colorRampPalette(c("white", "green"))
heatmap(x = merged.profiles.h2.k27*1,Rowv=NA,Colv = NA,labRow = "",labCol="",keep.dendro = F,col=colfunc(10)[c(3:9)])
sig.data <- read.table(file="only_k27_0_1.txt",header=F,as.is=T)
sig.data <- read.table(file="only_k27_0_1.txt",header=F,as.is=T)
normalized.no.marks.up.1.nuc.1 <- t(apply(X = sig.data[,700:930],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.2 <- t(apply(X = sig.data[,930:1080],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.3 <- t(apply(X = sig.data[,1080:1260],MARGIN = 1,FUN = normalize.vector))
normalized.no.marks.up.1.nuc.4 <- t(apply(X = sig.data[,1260:1440],MARGIN = 1,FUN = normalize.vector))
## Merge profiles
merged.profiles.k27 <- c()
central.1.k27 <- c()
nuc.width.1.k27 <- c()
i <- 1
## N 1
step.size <- 50
top <- 4
while(step.size*i < nrow(sig.data))
{
current.profile.1 <- colMeans(normalized.no.marks.up.1.nuc.1[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.1)
upper.bound <- max(current.profile.1)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.1 <- current.profile.1 > horizontal.line
current.pos.1 <- which(current.profile.1)
current.width.1 <- current.pos.1[length(current.pos.1)]-current.pos.1[1]
nuc.width.1.k27 <- c(nuc.width.1.k27,
current.width.1)
central.1.k27 <- c(central.1.k27,
current.pos.1[1]+floor(current.width.1/2))
## N 2
current.profile.2 <- colMeans(normalized.no.marks.up.1.nuc.2[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.2)
upper.bound <- max(current.profile.2)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.2 <- current.profile.2 > horizontal.line
## N 3
current.profile.3 <- colMeans(normalized.no.marks.up.1.nuc.3[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.3)
upper.bound <- max(current.profile.3)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.3 <- current.profile.3 > horizontal.line
##N 4
current.profile.4 <- colMeans(normalized.no.marks.up.1.nuc.4[(step.size*(i-1) + 1):(step.size*i),],na.rm = T)
lower.bound <- min(current.profile.4)
upper.bound <- max(current.profile.4)
horizontal.line <- upper.bound - (upper.bound - lower.bound)/top
current.profile.4 <- current.profile.4 > horizontal.line
#plot(c(current.profile.1,current.profile.2,current.profile.3,current.profile.4),type="l",lwd=2,col="blue",xlab="",ylab="")
merged.profiles.k27 <- rbind(merged.profiles.k27,
c(current.profile.1,current.profile.2,current.profile.3,current.profile.4))
i <- i + 1
}
plot(colMeans(merged.profiles.k27),type="l")
colfunc <- colorRampPalette(c("white", "purple"))
heatmap(x = merged.profiles.h2.k27*1,Rowv=NA,Colv = NA,labRow = "",labCol="",keep.dendro = F,col=colfunc(10)[c(3:9)])
boxplot(nuc.width.1.no.marks.up.1,nuc.width.1.h2,nuc.width.1.h2.k27,nuc.width.1.k27)
boxplot(central.1.no.marks.up.1,central.1.h2,central.1.h2.k27,central.1.k27)
sd(central.1.no.marks.up.1)
sd(central.1.h2)
sd(central.1.h2.k27)
sd(central.1.k27)
shiny::runApp('~/Dropbox/github_repos/AlgaeFun/web_app_rna_chip')
